Directory structure:
└── ivanmeda993-wedding-app/
    ├── components.json
    ├── middleware.ts
    ├── next.config.js
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── .eslintrc.json
    ├── app/
    │   ├── globals.css
    │   ├── layout.tsx
    │   ├── providers.tsx
    │   ├── (protected)/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   └── gifts/
    │   │       └── page.tsx
    │   ├── api/
    │   │   └── auth/
    │   │       └── callback/
    │   │           └── route.ts
    │   └── auth/
    │       ├── login/
    │       │   └── page.tsx
    │       └── register/
    │           └── page.tsx
    ├── components/
    │   └── ui/
    │       ├── accordion.tsx
    │       ├── alert-dialog.tsx
    │       ├── alert.tsx
    │       ├── aspect-ratio.tsx
    │       ├── avatar.tsx
    │       ├── badge.tsx
    │       ├── breadcrumb.tsx
    │       ├── button.tsx
    │       ├── calendar.tsx
    │       ├── card.tsx
    │       ├── carousel.tsx
    │       ├── chart.tsx
    │       ├── checkbox.tsx
    │       ├── collapsible.tsx
    │       ├── command.tsx
    │       ├── context-menu.tsx
    │       ├── dialog.tsx
    │       ├── drawer.tsx
    │       ├── dropdown-menu.tsx
    │       ├── form.tsx
    │       ├── hover-card.tsx
    │       ├── input-otp.tsx
    │       ├── input.tsx
    │       ├── label.tsx
    │       ├── menubar.tsx
    │       ├── navigation-menu.tsx
    │       ├── pagination.tsx
    │       ├── popover.tsx
    │       ├── progress.tsx
    │       ├── radio-group.tsx
    │       ├── resizable.tsx
    │       ├── scroll-area.tsx
    │       ├── select.tsx
    │       ├── separator.tsx
    │       ├── sheet.tsx
    │       ├── skeleton.tsx
    │       ├── slider.tsx
    │       ├── sonner.tsx
    │       ├── switch.tsx
    │       ├── table.tsx
    │       ├── tabs.tsx
    │       ├── textarea.tsx
    │       ├── toast.tsx
    │       ├── toaster.tsx
    │       ├── toggle-group.tsx
    │       ├── toggle.tsx
    │       └── tooltip.tsx
    ├── features/
    │   ├── auth/
    │   │   ├── hooks/
    │   │   │   └── use-auth.ts
    │   │   └── providers/
    │   │       └── auth-provider.tsx
    │   └── wedding/
    │       ├── schemas.ts
    │       ├── types.ts
    │       ├── components/
    │       │   ├── dashboard/
    │       │   │   ├── add-group-dialog.tsx
    │       │   │   ├── add-guest-dialog.tsx
    │       │   │   ├── edit-group-dialog.tsx
    │       │   │   ├── edit-guest-dialog.tsx
    │       │   │   ├── edit-wedding-dialog.tsx
    │       │   │   ├── group-actions.tsx
    │       │   │   ├── guest-card.tsx
    │       │   │   ├── guest-groups.tsx
    │       │   │   ├── guest-list.tsx
    │       │   │   ├── index.tsx
    │       │   │   ├── share-wedding-dialog.tsx
    │       │   │   ├── wedding-header.tsx
    │       │   │   └── wedding-stats.tsx
    │       │   └── setup/
    │       │       ├── index.tsx
    │       │       └── wedding-setup-form.tsx
    │       ├── hooks/
    │       │   ├── mutations.ts
    │       │   ├── queries.ts
    │       │   └── query-keys.ts
    │       ├── lib/
    │       │   ├── api.ts
    │       │   ├── dummy-data.ts
    │       │   └── utils.ts
    │       └── stores/
    │           └── filter-store.ts
    ├── hooks/
    │   └── use-toast.ts
    ├── lib/
    │   └── utils.ts
    ├── public/
    ├── supabase/
    │   └── migrations/
    │       ├── 20250202215057_frosty_sunset.sql
    │       ├── 20250202221226_late_harbor.sql
    │       ├── 20250202222538_rough_canyon.sql
    │       ├── 20250202222659_gentle_pond.sql
    │       ├── 20250202222829_purple_canyon.sql
    │       ├── 20250202222930_mute_mud.sql
    │       ├── 20250202223021_odd_rice.sql
    │       ├── 20250202223128_plain_haze.sql
    │       ├── 20250202223242_spring_shape.sql
    │       └── 20250203000000_add_wedding_collaborators.sql
    └── .bolt/
        ├── config.json
        ├── ignore
        └── prompt

================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


================================================
File: middleware.ts
================================================
import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  const response = NextResponse.next();
  const supabase = createMiddlewareClient({ req: request, res: response });

  // Dohvati sesiju
  const {
    data: { session },
  } = await supabase.auth.getSession();

  // Ako korisnik nije autentificiran i pokušava pristupiti zaštićenoj ruti
  if (!session) {
    // Preusmjeri na login stranicu
    return NextResponse.redirect(new URL("/auth/login", request.url));
  }

  return response;
}

// Definirajte koje rute trebaju biti zaštićene
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - auth (auth routes)
     * - api/auth (auth API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    "/((?!auth|api/auth|_next/static|_next/image|favicon.ico).*)",
  ],
};


================================================
File: next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: { unoptimized: true },
};

module.exports = nextConfig;

================================================
File: package.json
================================================
{
  "name": "nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.4",
    "@radix-ui/react-accordion": "^1.0.4",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-aspect-ratio": "^1.0.4",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-context-menu": "^2.2.5",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-dropdown-menu": "^2.1.5",
    "@radix-ui/react-hover-card": "^1.1.5",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-menubar": "^1.1.5",
    "@radix-ui/react-navigation-menu": "^1.2.4",
    "@radix-ui/react-popover": "^1.1.5",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.2.5",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.7",
    "@supabase/auth-helpers-nextjs": "^0.9.0",
    "@supabase/supabase-js": "^2.39.3",
    "@tanstack/react-query": "^5.17.19",
    "@types/node": "20.6.2",
    "@types/react": "18.2.22",
    "@types/react-dom": "18.2.7",
    "@types/uuid": "^9.0.8",
    "@vercel/analytics": "^1.4.1",
    "autoprefixer": "10.4.15",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cmdk": "^1.0.4",
    "embla-carousel-react": "^8.5.2",
    "eslint": "8.49.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.344.0",
    "next": "^14.2.23",
    "next-themes": "^0.4.4",
    "postcss": "8.4.30",
    "react": "^18.3.1",
    "react-day-picker": "^9.5.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.50.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.1",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.2.1",
    "tailwindcss": "3.3.3",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "5.2.2",
    "uuid": "^9.0.1",
    "vaul": "^1.1.2",
    "zod": "^3.22.4",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "bufferutil": "^4.0.8",
    "eslint-config-next": "^14.2.23",
    "utf-8-validate": "^6.0.3"
  }
}


================================================
File: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


================================================
File: tailwind.config.ts
================================================
import type { Config } from 'tailwindcss';

const config: Config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './features/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
};

export default config;

================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: .eslintrc.json
================================================
{
  "extends": "next/core-web-vitals"
}


================================================
File: app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
File: app/layout.tsx
================================================
import "./globals.css";
import type { Metadata, Viewport } from "next";
import { Inter } from "next/font/google";
import { Providers } from "./providers";
import { AuthProvider } from "@/features/auth/providers/auth-provider";
import { Analytics } from "@vercel/analytics/react";
const inter = Inter({ subsets: ["latin"] });

/**
 * Root Layout
 *
 * Application root layout providing:
 * - Global styles
 * - Theme provider
 * - Authentication context
 * - Error boundaries
 *
 * Currently supports Serbian language
 * with plans for internationalization
 *
 * @layout
 */

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  // Also supported but less commonly used
  // interactiveWidget: 'resizes-visual',
};

export const metadata: Metadata = {
  title: "Evidencija gostiju za venčanje",
  description:
    "Premium aplikacija za organizaciju i evidenciju gostiju na venčanju",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="sr" suppressHydrationWarning>
      <body className={inter.className} suppressHydrationWarning>
        <Providers>
          <AuthProvider>
            {children}
            <Analytics />
          </AuthProvider>
        </Providers>
      </body>
    </html>
  );
}


================================================
File: app/providers.tsx
================================================
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useState } from 'react';

export function Providers({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 1000 * 60 * 5, // 5 minutes
        refetchOnWindowFocus: false,
      },
    },
  }));

  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
}

================================================
File: app/(protected)/layout.tsx
================================================
"use client";

import { WeddingHeader } from "@/features/wedding/components/dashboard/wedding-header";
import { useWeddingDetails } from "@/features/wedding/hooks/queries";
import type { Viewport } from "next";
/**
 * Protected Layout
 *
 * Layout wrapper for authenticated routes:
 * - Handles authentication check
 * - Provides navigation
 * - Common UI elements
 *
 * @layout
 */

export default function ProtectedLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { data: weddingDetails, isLoading } = useWeddingDetails();

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto" />
          <p className="text-muted-foreground">Učitavanje...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container  mx-auto px-2 py-2 sm:py-6 space-y-2 sm:space-y-6">
        {weddingDetails && <WeddingHeader />}
        {children}
      </div>
    </div>
  );
}


================================================
File: app/(protected)/page.tsx
================================================
"use client";

import { useWeddingDetails } from "@/features/wedding/hooks/queries";
import { WeddingSetup } from "@/features/wedding/components/setup";
import { Dashboard } from "@/features/wedding/components/dashboard";

/**
 * Protected Dashboard Page
 *
 * Main entry point for authenticated users.
 * Renders the wedding planning dashboard with:
 * - Guest management
 * - Statistics
 * - Group management
 *
 * Protected route - requires authentication
 *
 * @page
 */

export default function Home() {
  const { data: weddingDetails, isLoading } = useWeddingDetails();

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto" />
          <p className="text-muted-foreground">Učitavanje...</p>
        </div>
      </div>
    );
  }

  if (!weddingDetails) return <WeddingSetup />;

  return <Dashboard />;
}


================================================
File: app/(protected)/gifts/page.tsx
================================================
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useGuests } from "@/features/wedding/hooks/queries";
import { ArrowLeft, ArrowUpDown, Search, ChevronDown } from "lucide-react";
import Link from "next/link";
import { useState, useMemo } from "react";
import type { Gift, Side, GiftType } from "@/features/wedding/types";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";

type SortField = "name" | "amount" | "type" | "side";
type SortOrder = "asc" | "desc";

interface GiftWithGuest extends Gift {
  guestName: string;
  side: Side;
}

/**
 * Gift Registry Page
 *
 * Manages wedding gifts with features:
 * - Gift tracking
 * - Gift assignment to guests
 * - Gift categories
 * - Notes and status tracking
 *
 * Protected route - requires authentication
 *
 * @page
 */

export default function GiftsPage() {
  const { data: guests = [] } = useGuests();
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedSide, setSelectedSide] = useState<Side | "all">("all");
  const [selectedType, setSelectedType] = useState<GiftType | "all">("all");
  const [sortField, setSortField] = useState<SortField>("name");
  const [sortOrder, setSortOrder] = useState<SortOrder>("asc");

  // Transform guests data to gift list
  const gifts = useMemo(() => {
    return guests
      .filter((guest) => guest.gift)
      .map((guest) => ({
        ...(guest.gift || {}),
        guestName: `${guest.firstName} ${guest.lastName}`,
        side: guest.side,
      }));
  }, [guests]);

  // Apply filters and sorting
  const filteredAndSortedGifts = useMemo(() => {
    return gifts
      .filter((gift) => {
        const matchesSearch = searchQuery
          ? gift.guestName.toLowerCase().includes(searchQuery.toLowerCase())
          : true;
        const matchesSide =
          selectedSide === "all" ? true : gift.side === selectedSide;
        const matchesType =
          selectedType === "all" ? true : gift.type === selectedType;
        return matchesSearch && matchesSide && matchesType;
      })
      .sort((a, b) => {
        let comparison = 0;

        switch (sortField) {
          case "name":
            comparison = a.guestName.localeCompare(b.guestName);
            break;
          case "amount":
            comparison = (a.amount || 0) - (b.amount || 0);
            break;
          case "type":
            comparison = (a.type || "").localeCompare(b.type || "");
            break;
          case "side":
            comparison = a.side.localeCompare(b.side);
            break;
        }

        return sortOrder === "asc" ? comparison : -comparison;
      });
  }, [gifts, searchQuery, selectedSide, selectedType, sortField, sortOrder]);

  // Calculate total gift amount for filtered gifts
  const filteredTotalAmount = filteredAndSortedGifts.reduce((acc, gift) => {
    if (gift.type === "money" && gift.amount) {
      return acc + gift.amount;
    }
    return acc;
  }, 0);

  const handleSort = (field: SortField) => {
    if (field === sortField) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortOrder("asc");
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button
          variant="ghost"
          size="sm"
          asChild
          className="gap-2 hover:bg-primary/5"
        >
          <Link href="/">
            <ArrowLeft className="w-4 h-4" />
            <span className="hidden sm:inline">Nazad na evidenciju</span>
            <span className="sm:hidden">Nazad</span>
          </Link>
        </Button>
      </div>

      <Card>
        <CardContent className="p-4">
          <div className="space-y-4">
            {/* Mobile Filters Button */}
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" className="w-full sm:hidden mb-4">
                  <ChevronDown className="h-4 w-4 mr-2" />
                  Filteri i pretraga
                </Button>
              </SheetTrigger>
              <SheetContent side="top" className="w-full">
                <SheetHeader>
                  <SheetTitle>Filteri i pretraga</SheetTitle>
                </SheetHeader>
                <div className="space-y-4 py-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                    <Input
                      placeholder="Pretraži po imenu..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>

                  <Select
                    value={selectedSide}
                    onValueChange={(value: string) =>
                      setSelectedSide(value as Side | "all")
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Strana" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Sve strane</SelectItem>
                      <SelectItem value="bride">Mladina strana</SelectItem>
                      <SelectItem value="groom">Mladoženjina strana</SelectItem>
                    </SelectContent>
                  </Select>

                  <Select
                    value={selectedType as string}
                    onValueChange={(value: string) =>
                      setSelectedType(value as GiftType | "all")
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Tip poklona" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Svi pokloni</SelectItem>
                      <SelectItem value="money">Novac</SelectItem>
                      <SelectItem value="other">Drugo</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </SheetContent>
            </Sheet>

            {/* Desktop Filters */}
            <div className="hidden sm:flex flex-col sm:flex-row gap-4">
              <div className="flex-1 grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <Input
                    placeholder="Pretraži po imenu..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>

                <Select
                  value={selectedSide}
                  onValueChange={(value: string) =>
                    setSelectedSide(value as Side | "all")
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Strana" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Sve strane</SelectItem>
                    <SelectItem value="bride">Mladina strana</SelectItem>
                    <SelectItem value="groom">Mladoženjina strana</SelectItem>
                  </SelectContent>
                </Select>

                <Select
                  value={selectedType as string}
                  onValueChange={(value: string) =>
                    setSelectedType(value as GiftType | "all")
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Tip poklona" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Svi pokloni</SelectItem>
                    <SelectItem value="money">Novac</SelectItem>
                    <SelectItem value="other">Drugo</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="text-right text-sm border-t pt-4 sm:border-none sm:pt-0">
              <span className="text-muted-foreground">Ukupna vrednost:</span>{" "}
              <span className="font-bold text-lg">
                €{filteredTotalAmount.toLocaleString("de-DE")}
              </span>
            </div>

            {/* Mobile List View */}
            <div className="sm:hidden space-y-4">
              {filteredAndSortedGifts.map((gift) => (
                <div
                  key={gift.guestName}
                  className="p-4 rounded-lg border bg-card hover:bg-muted/50 transition-colors"
                >
                  <div className="space-y-2">
                    <div className="font-medium">{gift.guestName}</div>
                    <div className="text-sm text-muted-foreground">
                      {gift.side === "bride" ? "Mladina" : "Mladoženjina"}{" "}
                      strana
                    </div>
                    <div className="flex justify-between items-center text-sm">
                      <span>{gift.type === "money" ? "Novac" : "Drugo"}</span>
                      <span className="font-medium">
                        {gift.type === "money"
                          ? `€${gift.amount?.toLocaleString("de-DE")}`
                          : gift.description}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Desktop Table View */}
            <div className="hidden sm:block rounded-md border">
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b bg-muted/50">
                      <th className="h-12 px-4 text-left align-middle font-medium">
                        <Button
                          variant="ghost"
                          onClick={() => handleSort("name")}
                          className="hover:bg-transparent p-0 font-medium"
                        >
                          Gost
                          <ArrowUpDown className="ml-2 h-4 w-4" />
                        </Button>
                      </th>
                      <th className="h-12 px-4 text-left align-middle font-medium">
                        <Button
                          variant="ghost"
                          onClick={() => handleSort("side")}
                          className="hover:bg-transparent p-0 font-medium"
                        >
                          Strana
                          <ArrowUpDown className="ml-2 h-4 w-4" />
                        </Button>
                      </th>
                      <th className="h-12 px-4 text-left align-middle font-medium">
                        <Button
                          variant="ghost"
                          onClick={() => handleSort("type")}
                          className="hover:bg-transparent p-0 font-medium"
                        >
                          Tip poklona
                          <ArrowUpDown className="ml-2 h-4 w-4" />
                        </Button>
                      </th>
                      <th className="h-12 px-4 text-left align-middle font-medium">
                        <Button
                          variant="ghost"
                          onClick={() => handleSort("amount")}
                          className="hover:bg-transparent p-0 font-medium"
                        >
                          Vrednost/Opis
                          <ArrowUpDown className="ml-2 h-4 w-4" />
                        </Button>
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredAndSortedGifts.map((gift) => (
                      <tr
                        key={gift.guestName}
                        className="border-b transition-colors hover:bg-muted/50"
                      >
                        <td className="p-4 align-middle">{gift.guestName}</td>
                        <td className="p-4 align-middle">
                          {gift.side === "bride" ? "Mladina" : "Mladoženjina"}
                        </td>
                        <td className="p-4 align-middle">
                          {gift.type === "money" ? "Novac" : "Drugo"}
                        </td>
                        <td className="p-4 align-middle">
                          {gift.type === "money"
                            ? `€${gift.amount?.toLocaleString("de-DE")}`
                            : gift.description}
                        </td>
                      </tr>
                    ))}
                    <tr className="border-t-2 bg-muted/10 font-medium">
                      <td className="p-4 align-middle" colSpan={3}>
                        Ukupna vrednost novčanih poklona
                      </td>
                      <td className="p-4 align-middle">
                        €{filteredTotalAmount.toLocaleString("de-DE")}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
File: app/api/auth/callback/route.ts
================================================
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function GET(request: NextRequest) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get('code');

  if (code) {
    const supabase = createRouteHandlerClient({ cookies });
    await supabase.auth.exchangeCodeForSession(code);
  }

  // URL to redirect to after sign in process completes
  return NextResponse.redirect(requestUrl.origin);
}

================================================
File: app/auth/login/page.tsx
================================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Heart, Loader2 } from 'lucide-react';
import { useAuth } from '@/features/auth/hooks/use-auth';
import Link from 'next/link';
import { Alert, AlertDescription } from '@/components/ui/alert';

const loginSchema = z.object({
  email: z.string().email('Unesite validnu email adresu'),
  password: z.string().min(6, 'Lozinka mora imati najmanje 6 karaktera'),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { signIn } = useAuth();

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });

  const onSubmit = async (values: LoginFormValues) => {
    try {
      setError(null);
      await signIn(values);
      router.push('/');
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Neispravni podaci za prijavu');
      }
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-background to-muted/20 p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-center flex items-center justify-center gap-2">
            <Heart className="text-pink-500" />
            Evidencija gostiju za venčanje
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email adresa</FormLabel>
                    <FormControl>
                      <Input placeholder="vasa@email.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Lozinka</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {error && (
                <Alert variant="destructive">
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
                {form.formState.isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Prijavljivanje...
                  </>
                ) : (
                  'Prijavi se'
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-muted-foreground">
            Nemate nalog?{' '}
            <Link href="/auth/register" className="text-primary hover:underline">
              Registrujte se
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}

================================================
File: app/auth/register/page.tsx
================================================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Heart, Loader2 } from "lucide-react";
import { useAuth } from "@/features/auth/hooks/use-auth";
import Link from "next/link";
import { Alert, AlertDescription } from "@/components/ui/alert";

const registerSchema = z
  .object({
    email: z.string().email("Unesite validnu email adresu"),
    password: z.string().min(6, "Lozinka mora imati najmanje 6 karaktera"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Lozinke se ne poklapaju",
    path: ["confirmPassword"],
  });

type RegisterFormValues = z.infer<typeof registerSchema>;

export default function RegisterPage() {
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const router = useRouter();
  const { signUp } = useAuth();

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  const onSubmit = async (values: RegisterFormValues) => {
    try {
      setError(null);
      setSuccess(null);
      await signUp(values);
      setSuccess(
        "Poslali smo vam email za potvrdu. Molimo vas da potvrdite vašu email adresu pre prijave. Proverite spam folder ako ne vidite email."
      );
      form.reset();
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Došlo je do greške prilikom registracije");
      }
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-background to-muted/20 p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-center flex items-center justify-center gap-2">
            <Heart className="text-pink-500" />
            Registracija
          </CardTitle>
        </CardHeader>
        <CardContent>
          {success && (
            <Alert className="mb-4" variant="default">
              <AlertDescription>{success}</AlertDescription>
            </Alert>
          )}

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email adresa</FormLabel>
                    <FormControl>
                      <Input placeholder="vasa@email.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Lozinka</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="confirmPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Potvrdite lozinku</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {error && (
                <Alert variant="destructive">
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <Button
                type="submit"
                className="w-full"
                disabled={form.formState.isSubmitting}
              >
                {form.formState.isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Registracija...
                  </>
                ) : (
                  "Registruj se"
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-muted-foreground">
            Već imate nalog?{" "}
            <Link href="/auth/login" className="text-primary hover:underline">
              Prijavite se
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}


================================================
File: components/ui/accordion.tsx
================================================
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn('border-b', className)}
    {...props}
  />
));
AccordionItem.displayName = 'AccordionItem';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn('pb-4 pt-0', className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };


================================================
File: components/ui/alert-dialog.tsx
================================================
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = 'AlertDialogHeader';

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = 'AlertDialogFooter';

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: 'outline' }),
      'mt-2 sm:mt-0',
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};


================================================
File: components/ui/alert.tsx
================================================
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = 'Alert';

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn('mb-1 font-medium leading-none tracking-tight', className)}
    {...props}
  />
));
AlertTitle.displayName = 'AlertTitle';

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm [&_p]:leading-relaxed', className)}
    {...props}
  />
));
AlertDescription.displayName = 'AlertDescription';

export { Alert, AlertTitle, AlertDescription };


================================================
File: components/ui/aspect-ratio.tsx
================================================
'use client';

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio';

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };


================================================
File: components/ui/avatar.tsx
================================================
'use client';

import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };


================================================
File: components/ui/badge.tsx
================================================
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };


================================================
File: components/ui/breadcrumb.tsx
================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = 'Breadcrumb';

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<'ol'>
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = 'BreadcrumbList';

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<'li'>
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn('inline-flex items-center gap-1.5', className)}
    {...props}
  />
));
BreadcrumbItem.displayName = 'BreadcrumbItem';

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      ref={ref}
      className={cn('transition-colors hover:text-foreground', className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = 'BreadcrumbLink';

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<'span'>
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn('font-normal text-foreground', className)}
    {...props}
  />
));
BreadcrumbPage.displayName = 'BreadcrumbPage';

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn('[&>svg]:size-3.5', className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};


================================================
File: components/ui/button.tsx
================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };


================================================
File: components/ui/calendar.tsx
================================================
"use client";

import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      // components={{
      //   PrevButton:  <ChevronLeft className="h-4 w-4" />
      //   NextButton: <ChevronRight className="h-4 w-4" />,
      // }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


================================================
File: components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

/**
 * Card Component
 *
 * Reusable card component with:
 * - Consistent styling
 * - Optional header
 * - Content area
 * - Footer section
 * - Hover effects
 *
 * @component
 * @param {Object} props
 * @param {ReactNode} props.children - Card content
 * @param {string} [props.className] - Additional CSS classes
 */

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-2 md:p-2 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


================================================
File: components/ui/carousel.tsx
================================================
'use client';

import * as React from 'react';
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react';
import { ArrowLeft, ArrowRight } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: 'horizontal' | 'vertical';
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />');
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = 'horizontal',
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === 'horizontal' ? 'x' : 'y',
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === 'ArrowLeft') {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on('reInit', onSelect);
      api.on('select', onSelect);

      return () => {
        api?.off('select', onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn('relative', className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = 'Carousel';

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = 'CarouselContent';

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = 'CarouselItem';

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute  h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-left-12 top-1/2 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = 'CarouselPrevious';

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-right-12 top-1/2 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = 'CarouselNext';

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};


================================================
File: components/ui/chart.tsx
================================================
'use client';

import * as React from 'react';
import * as RechartsPrimitive from 'recharts';

import { cn } from '@/lib/utils';

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />');
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >['children'];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = 'Chart';

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join('\n')}
}
`
          )
          .join('\n'),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<'div'> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: 'line' | 'dot' | 'dashed';
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = 'dot',
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || 'value'}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === 'string'
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn('font-medium', labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn('font-medium', labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== 'dot';

    return (
      <div
        ref={ref}
        className={cn(
          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',
                  indicator === 'dot' && 'items-center'
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed',
                            }
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center'
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = 'ChartTooltip';

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> &
    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          'flex items-center justify-center gap-4',
          verticalAlign === 'top' ? 'pb-3' : 'pt-3',
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || 'value'}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = 'ChartLegend';

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined;
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};


================================================
File: components/ui/checkbox.tsx
================================================
'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check } from 'lucide-react';

import { cn } from '@/lib/utils';

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };


================================================
File: components/ui/collapsible.tsx
================================================
'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.Trigger;

const CollapsibleContent = CollapsiblePrimitive.Content;

export {
  Collapsible,
  CollapsibleTrigger,
  CollapsibleContent,
};

================================================
File: components/ui/command.tsx
================================================
'use client';

import * as React from 'react';
import { type DialogProps } from '@radix-ui/react-dialog';
import { Command as CommandPrimitive } from 'cmdk';
import { Search } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Dialog, DialogContent } from '@/components/ui/dialog';

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = 'CommandShortcut';

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};


================================================
File: components/ui/context-menu.tsx
================================================
'use client';

import * as React from 'react';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold text-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-border', className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = 'ContextMenuShortcut';

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};


================================================
File: components/ui/dialog.tsx
================================================
'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};


================================================
File: components/ui/drawer.tsx
================================================
'use client';

import * as React from 'react';
import { Drawer as DrawerPrimitive } from 'vaul';

import { cn } from '@/lib/utils';

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = 'Drawer';

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn('fixed inset-0 z-50 bg-black/80', className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = 'DrawerContent';

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)}
    {...props}
  />
);
DrawerHeader.displayName = 'DrawerHeader';

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('mt-auto flex flex-col gap-2 p-4', className)}
    {...props}
  />
);
DrawerFooter.displayName = 'DrawerFooter';

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};


================================================
File: components/ui/dropdown-menu.tsx
================================================
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};


================================================
File: components/ui/form.tsx
================================================
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};


================================================
File: components/ui/hover-card.tsx
================================================
'use client';

import * as React from 'react';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';

import { cn } from '@/lib/utils';

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      'z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };


================================================
File: components/ui/input-otp.tsx
================================================
'use client';

import * as React from 'react';
import { OTPInput, OTPInputContext } from 'input-otp';
import { Dot } from 'lucide-react';

import { cn } from '@/lib/utils';

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      'flex items-center gap-2 has-[:disabled]:opacity-50',
      containerClassName
    )}
    className={cn('disabled:cursor-not-allowed', className)}
    {...props}
  />
));
InputOTP.displayName = 'InputOTP';

const InputOTPGroup = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center', className)} {...props} />
));
InputOTPGroup.displayName = 'InputOTPGroup';

const InputOTPSlot = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',
        isActive && 'z-10 ring-2 ring-ring ring-offset-background',
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = 'InputOTPSlot';

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
));
InputOTPSeparator.displayName = 'InputOTPSeparator';

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };


================================================
File: components/ui/input.tsx
================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };


================================================
File: components/ui/label.tsx
================================================
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };


================================================
File: components/ui/menubar.tsx
================================================
'use client';

import * as React from 'react';
import * as MenubarPrimitive from '@radix-ui/react-menubar';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',
      className
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      className
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        'ml-auto text-xs tracking-widest text-muted-foreground',
        className
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = 'MenubarShortcut';

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};


================================================
File: components/ui/navigation-menu.tsx
================================================
import * as React from 'react';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import { cva } from 'class-variance-authority';
import { ChevronDown } from 'lucide-react';

import { cn } from '@/lib/utils';

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      'relative z-10 flex max-w-max flex-1 items-center justify-center',
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      'group flex flex-1 list-none items-center justify-center space-x-1',
      className
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), 'group', className)}
    {...props}
  >
    {children}{' '}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',
      className
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn('absolute left-0 top-full flex justify-center')}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};


================================================
File: components/ui/pagination.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { buttonVariants } from "./button";
import type { ButtonProps } from "./button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};


================================================
File: components/ui/popover.tsx
================================================
'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/lib/utils';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };


================================================
File: components/ui/progress.tsx
================================================
'use client';

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      'relative h-4 w-full overflow-hidden rounded-full bg-secondary',
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };


================================================
File: components/ui/radio-group.tsx
================================================
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn('grid gap-2', className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };


================================================
File: components/ui/resizable.tsx
================================================
'use client';

import { GripVertical } from 'lucide-react';
import * as ResizablePrimitive from 'react-resizable-panels';

import { cn } from '@/lib/utils';

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90',
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };


================================================
File: components/ui/scroll-area.tsx
================================================
'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/lib/utils';

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn('relative overflow-hidden', className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      'flex touch-none select-none transition-colors',
      orientation === 'vertical' &&
        'h-full w-2.5 border-l border-l-transparent p-[1px]',
      orientation === 'horizontal' &&
        'h-2.5 flex-col border-t border-t-transparent p-[1px]',
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };


================================================
File: components/ui/select.tsx
================================================
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};


================================================
File: components/ui/separator.tsx
================================================
'use client';

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };


================================================
File: components/ui/sheet.tsx
================================================
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


================================================
File: components/ui/skeleton.tsx
================================================
import { cn } from '@/lib/utils';

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn('animate-pulse rounded-md bg-muted', className)}
      {...props}
    />
  );
}

export { Skeleton };


================================================
File: components/ui/slider.tsx
================================================
'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';

import { cn } from '@/lib/utils';

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex w-full touch-none select-none items-center',
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };


================================================
File: components/ui/sonner.tsx
================================================
'use client';

import { useTheme } from 'next-themes';
import { Toaster as Sonner } from 'sonner';

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton:
            'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  );
};

export { Toaster };


================================================
File: components/ui/switch.tsx
================================================
'use client';

import * as React from 'react';
import * as SwitchPrimitives from '@radix-ui/react-switch';

import { cn } from '@/lib/utils';

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };


================================================
File: components/ui/table.tsx
================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn('w-full caption-bottom text-sm', className)}
      {...props}
    />
  </div>
));
Table.displayName = 'Table';

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
));
TableHeader.displayName = 'TableHeader';

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn('[&_tr:last-child]:border-0', className)}
    {...props}
  />
));
TableBody.displayName = 'TableBody';

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',
      className
    )}
    {...props}
  />
));
TableFooter.displayName = 'TableFooter';

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
));
TableRow.displayName = 'TableRow';

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
));
TableHead.displayName = 'TableHead';

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
    {...props}
  />
));
TableCell.displayName = 'TableCell';

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
));
TableCaption.displayName = 'TableCaption';

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};


================================================
File: components/ui/tabs.tsx
================================================
'use client';

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';

import { cn } from '@/lib/utils';

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };


================================================
File: components/ui/textarea.tsx
================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export { Textarea };


================================================
File: components/ui/toast.tsx
================================================
'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};


================================================
File: components/ui/toaster.tsx
================================================
"use client";

import { useToast } from "@/hooks/use-toast";
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {/* biome-ignore lint/complexity/useArrowFunction: <explanation> */}
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}


================================================
File: components/ui/toggle-group.tsx
================================================
"use client";

import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import type { VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };


================================================
File: components/ui/toggle.tsx
================================================
'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const toggleVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-10 px-3',
        sm: 'h-9 px-2.5',
        lg: 'h-11 px-5',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };


================================================
File: components/ui/tooltip.tsx
================================================
'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };


================================================
File: features/auth/hooks/use-auth.ts
================================================
'use client';

import { useContext } from 'react';
import { AuthContext } from '../providers/auth-provider';

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================================================
File: features/auth/providers/auth-provider.tsx
================================================
"use client";

import { createContext, useEffect, useState, useCallback } from "react";
import { useRouter, usePathname } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import type { User } from "@supabase/supabase-js";

const supabase = createClientComponentClient();

interface AuthContextType {
  user: User | null;
  signIn: (credentials: { email: string; password: string }) => Promise<void>;
  signUp: (credentials: { email: string; password: string }) => Promise<void>;
  signOut: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextType>({
  user: null,
  signIn: async () => {},
  signUp: async () => {},
  signOut: async () => {},
});

const publicRoutes = ["/auth/login", "/auth/register"];

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const pathname = usePathname();

  const checkSession = useCallback(async () => {
    try {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
    } catch (error) {
      console.error("Error checking session:", error);
      setUser(null);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    checkSession();

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      if (event === "SIGNED_IN") {
        setUser(session?.user ?? null);
        if (publicRoutes.includes(pathname)) {
          router.push("/");
        }
      } else if (event === "SIGNED_OUT") {
        setUser(null);
        router.push("/auth/login");
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [checkSession, router, pathname]);

  const signIn = async ({
    email,
    password,
  }: {
    email: string;
    password: string;
  }) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      if (error.message === "Email not confirmed") {
        throw new Error("Molimo vas da potvrdite email adresu pre prijave.");
      }
      throw error;
    }
  };

  const signUp = async ({
    email,
    password,
  }: {
    email: string;
    password: string;
  }) => {
    const { error, data } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}/api/auth/callback`,
      },
    });

    if (error) {
      throw error;
    }

    if (data.user && !data.user.confirmed_at) {
      throw new Error(
        "Poslali smo vam email za potvrdu. Molimo vas da potvrdite vašu email adresu pre prijave. Proverite spam folder ako ne vidite email."
      );
    }
  };

  const signOut = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      setUser(null);
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary" />
      </div>
    );
  }

  return (
    <AuthContext.Provider value={{ user, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  );
}


================================================
File: features/wedding/schemas.ts
================================================
import * as z from 'zod';

export const weddingSetupSchema = z.object({
  brideName: z.string().min(2, 'Ime mlade mora imati bar 2 karaktera'),
  groomName: z.string().min(2, 'Ime mladoženje mora imati bar 2 karaktera'),
  venue: z.object({
    name: z.string().min(2, 'Naziv lokacije mora imati bar 2 karaktera'),
    address: z.string().min(5, 'Adresa mora imati bar 5 karaktera'),
    hall: z.string().min(2, 'Naziv sale mora imati bar 2 karaktera'),
  }),
  date: z.string().min(1, 'Datum je obavezan'),
  pricePerPerson: z.string().transform((val) => Number(val)),
});

================================================
File: features/wedding/types.ts
================================================
import type { z } from 'zod';
import { weddingSetupSchema } from './schemas';

export type WeddingSetupFormData = z.infer<typeof weddingSetupSchema>;

export interface WeddingDetails extends WeddingSetupFormData {
  id: string;
}

export type Side = 'bride' | 'groom';
export type AttendanceStatus = 'yes' | 'no' | 'pending';
export type GiftType = 'money' | 'other' | null;

export interface Gift {
  type: GiftType;
  description?: string;
  amount?: number;
}

export interface Guest {
  id: string;
  firstName: string;
  lastName: string;
  phone?: string;
  attendance: AttendanceStatus;
  side: Side;
  groupId: string | null;
  gift?: Gift;
  notes?: string;
  companions: Companion[];
}

export interface Companion {
  id: string;
  firstName: string;
  lastName?: string;
  isAdult: boolean;
}

export interface Group {
  id: string;
  name: string;
  side: Side;
}

export interface GroupStats {
  totalGuests: number;
  totalAdults: number;
  totalChildren: number;
  totalGiftAmount: number;
}

export interface GroupWithStats extends Group {
  stats: GroupStats;
}

export interface WeddingStats {
  totalGuests: number;
  totalAdults: number;
  totalChildren: number;
  totalCost: number;
  totalGiftAmount: number;
}

================================================
File: features/wedding/components/dashboard/add-group-dialog.tsx
================================================
'use client';

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useAddGroup } from '../../hooks/mutations';
import type { Side } from '../../types';

export function AddGroupDialog({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  const [groupName, setGroupName] = useState('');
  const [side, setSide] = useState<Side>('bride');
  const addGroup = useAddGroup();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (groupName.trim()) {
      addGroup.mutate(
        { name: groupName.trim(), side },
        {
          onSuccess: () => {
            setGroupName('');
            setSide('bride');
            onOpenChange(false);
          },
        }
      );
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Nova grupa</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="groupName">Naziv grupe</Label>
            <Input
              id="groupName"
              value={groupName}
              onChange={(e) => setGroupName(e.target.value)}
              placeholder="npr. Porodica, Prijatelji, Posao..."
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="side">Strana</Label>
            <Select value={side} onValueChange={(value: Side) => setSide(value)}>
              <SelectTrigger>
                <SelectValue placeholder="Izaberi stranu" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="bride">Mladina</SelectItem>
                <SelectItem value="groom">Mladoženjina</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <Button type="submit" className="w-full" disabled={addGroup.isPending}>
            {addGroup.isPending ? 'Dodavanje...' : 'Dodaj grupu'}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}

================================================
File: features/wedding/components/dashboard/add-guest-dialog.tsx
================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { PlusCircle, X } from "lucide-react";
import { useEffect } from "react";
import { useGroups } from "../../hooks/queries";
import { useAddGuest } from "../../hooks/mutations";

const companionSchema = z.object({
  firstName: z.string().min(2, "Ime mora imati bar 2 karaktera"),
  lastName: z.string().optional(),
  isAdult: z.boolean(),
});

const guestSchema = z.object({
  firstName: z.string().min(2, "Ime mora imati bar 2 karaktera"),
  lastName: z.string().min(2, "Prezime mora imati bar 2 karaktera"),
  phone: z.string().optional(),
  attendance: z.enum(["yes", "no", "pending"]),
  side: z.enum(["bride", "groom"]),
  groupId: z.string().optional(),
  notes: z.string().optional(),
  companions: z.array(companionSchema).default([]),
});

type GuestFormValues = z.infer<typeof guestSchema>;

const defaultValues: GuestFormValues = {
  firstName: "",
  lastName: "",
  phone: "",
  attendance: "pending",
  side: "bride",
  groupId: undefined,
  notes: "",
  companions: [],
};

export function AddGuestDialog({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  const { data: groups = [] } = useGroups();
  const addGuest = useAddGuest();

  const form = useForm<GuestFormValues>({
    resolver: zodResolver(guestSchema),
    defaultValues,
  });

  const selectedSide = form.watch("side");
  const companions = form.watch("companions");

  // Reset groupId when side changes
  useEffect(() => {
    form.setValue("groupId", undefined);
  }, [form]);

  const filteredGroups = groups.filter((group) => group.side === selectedSide);

  const addCompanion = () => {
    const currentCompanions = form.getValues("companions");
    form.setValue("companions", [
      ...currentCompanions,
      { firstName: "", lastName: "", isAdult: true },
    ]);
  };

  const removeCompanion = (index: number) => {
    const currentCompanions = form.getValues("companions");
    form.setValue(
      "companions",
      currentCompanions.filter((_, i) => i !== index)
    );
  };

  const onSubmit = (values: GuestFormValues) => {
    addGuest.mutate(
      {
        ...values,
        groupId: values.groupId || null,
        companions: values.companions.map((c, i) => ({
          ...c,
          id: `temp-${i}`,
        })),
      },
      {
        onSuccess: () => {
          form.reset(defaultValues);
          onOpenChange(false);
        },
      }
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Novi gost</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ime</FormLabel>
                    <FormControl>
                      <Input placeholder="Ime" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Prezime</FormLabel>
                    <FormControl>
                      <Input placeholder="Prezime" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="side"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Strana</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Izaberi stranu" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="bride">Mladina</SelectItem>
                        <SelectItem value="groom">Mladoženjina</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="groupId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Grupa</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Izaberi grupu" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {filteredGroups.map((group) => (
                          <SelectItem key={group.id} value={group.id}>
                            {group.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Broj telefona</FormLabel>
                  <FormControl>
                    <Input placeholder="Broj telefona" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Napomena</FormLabel>
                  <FormControl>
                    <Input placeholder="Napomena" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Companions Section */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Pratioci</h3>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addCompanion}
                >
                  <PlusCircle className="w-4 h-4 mr-2" />
                  Dodaj pratioca
                </Button>
              </div>

              {companions.map((_, index) => (
                <div
                  // biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
                  key={index}
                  className="space-y-4 p-4 border rounded-lg relative"
                >
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-2 top-2"
                    onClick={() => removeCompanion(index)}
                  >
                    <X className="w-4 h-4" />
                  </Button>

                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name={`companions.${index}.firstName`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Ime</FormLabel>
                          <FormControl>
                            <Input placeholder="Ime" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name={`companions.${index}.lastName`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Prezime</FormLabel>
                          <FormControl>
                            <Input placeholder="Prezime" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={form.control}
                    name={`companions.${index}.isAdult`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Tip</FormLabel>
                        <Select
                          onValueChange={(value) =>
                            field.onChange(value === "adult")
                          }
                          value={field.value ? "adult" : "child"}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Izaberi tip" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="adult">Odrasla osoba</SelectItem>
                            <SelectItem value="child">Dete</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              ))}
            </div>

            <Button type="submit" className="w-full">
              Dodaj gosta
            </Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}


================================================
File: features/wedding/components/dashboard/edit-group-dialog.tsx
================================================
'use client';

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useUpdateGroup } from '../../hooks/mutations';
import type { Group } from '../../types';

const groupSchema = z.object({
  name: z.string().min(2, 'Naziv grupe mora imati bar 2 karaktera'),
  side: z.enum(['bride', 'groom']),
});

type GroupFormValues = z.infer<typeof groupSchema>;

export function EditGroupDialog({
  group,
  open,
  onOpenChange,
}: {
  group: Group;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  const [error, setError] = useState<string | null>(null);
  const updateGroup = useUpdateGroup();

  const form = useForm<GroupFormValues>({
    resolver: zodResolver(groupSchema),
    defaultValues: {
      name: group.name,
      side: group.side,
    },
  });

  const onSubmit = async (values: GroupFormValues) => {
    try {
      setError(null);
      await updateGroup.mutateAsync({ id: group.id, updates: values });
      onOpenChange(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Došlo je do greške pri ažuriranju grupe');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Izmena grupe</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Naziv grupe</FormLabel>
                  <FormControl>
                    <Input placeholder="npr. Porodica, Prijatelji, Posao..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="side"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Strana</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Izaberi stranu" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="bride">Mladina</SelectItem>
                      <SelectItem value="groom">Mladoženjina</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <Button type="submit" className="w-full" disabled={updateGroup.isPending}>
              {updateGroup.isPending ? 'Čuvanje...' : 'Sačuvaj izmene'}
            </Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

================================================
File: features/wedding/components/dashboard/edit-guest-dialog.tsx
================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { PlusCircle, X } from "lucide-react";
import { useEffect } from "react";
import { useGroups } from "../../hooks/queries";
import { useUpdateGuest } from "../../hooks/mutations";
import type { Guest } from "../../types";

const companionSchema = z.object({
  firstName: z.string().min(2, "Ime mora imati bar 2 karaktera"),
  lastName: z.string().optional(),
  isAdult: z.boolean(),
});

const guestSchema = z.object({
  firstName: z.string().min(2, "Ime mora imati bar 2 karaktera"),
  lastName: z.string().min(2, "Prezime mora imati bar 2 karaktera"),
  phone: z.string().optional(),
  attendance: z.enum(["yes", "no", "pending"]),
  side: z.enum(["bride", "groom"]),
  groupId: z.string().optional(),
  gift: z.string().optional(),
  notes: z.string().optional(),
  companions: z.array(companionSchema).default([]),
});

type GuestFormValues = z.infer<typeof guestSchema>;

export function EditGuestDialog({
  guest,
  open,
  onOpenChange,
}: {
  guest: Guest;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  const { data: groups = [] } = useGroups();
  const updateGuest = useUpdateGuest();

  const form = useForm<GuestFormValues>({
    resolver: zodResolver(guestSchema),
    defaultValues: {
      firstName: guest.firstName,
      lastName: guest.lastName,
      phone: guest.phone || "",
      attendance: guest.attendance,
      side: guest.side,
      groupId: guest.groupId || undefined,
      gift: guest.gift?.description || undefined,
      notes: guest.notes || "",
      companions: guest.companions.map((c) => ({
        firstName: c.firstName,
        lastName: c.lastName || "",
        isAdult: c.isAdult,
      })),
    },
  });

  const selectedSide = form.watch("side");
  const companions = form.watch("companions");

  // Reset groupId when side changes
  useEffect(() => {
    form.setValue("groupId", undefined);
  }, [form]);

  const filteredGroups = groups.filter((group) => group.side === selectedSide);

  const addCompanion = () => {
    const currentCompanions = form.getValues("companions");
    form.setValue("companions", [
      ...currentCompanions,
      { firstName: "", lastName: "", isAdult: true },
    ]);
  };

  const removeCompanion = (index: number) => {
    const currentCompanions = form.getValues("companions");
    form.setValue(
      "companions",
      currentCompanions.filter((_, i) => i !== index)
    );
  };

  const onSubmit = (values: GuestFormValues) => {
    updateGuest.mutate(
      {
        id: guest.id,
        guest: {
          ...values,
          gift: values.gift
            ? { type: "other", description: values.gift }
            : undefined,
          companions: values.companions.map((c, i) => ({
            ...c,
            id: guest.companions[i]?.id || `temp-${i}`,
          })),
        },
      },
      {
        onSuccess: () => {
          onOpenChange(false);
        },
      }
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Izmena gosta</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ime</FormLabel>
                    <FormControl>
                      <Input placeholder="Ime" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Prezime</FormLabel>
                    <FormControl>
                      <Input placeholder="Prezime" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="side"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Strana</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Izaberi stranu" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="bride">Mladina</SelectItem>
                        <SelectItem value="groom">Mladoženjina</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="attendance"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Status dolaska</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Izaberi status" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="yes">Dolazi</SelectItem>
                        <SelectItem value="no">Ne dolazi</SelectItem>
                        <SelectItem value="pending">Neodređeno</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="groupId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Grupa</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Izaberi grupu" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {filteredGroups.map((group) => (
                        <SelectItem key={group.id} value={group.id}>
                          {group.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Broj telefona</FormLabel>
                  <FormControl>
                    <Input placeholder="Broj telefona" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="gift"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Poklon</FormLabel>
                  <FormControl>
                    <Input placeholder="Poklon" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Napomena</FormLabel>
                  <FormControl>
                    <Input placeholder="Napomena" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Companions Section */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Pratioci</h3>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addCompanion}
                >
                  <PlusCircle className="w-4 h-4 mr-2" />
                  Dodaj pratioca
                </Button>
              </div>

              {companions.map((_, index) => (
                <div
                  key={index}
                  className="space-y-4 p-4 border rounded-lg relative"
                >
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-2 top-2"
                    onClick={() => removeCompanion(index)}
                  >
                    <X className="w-4 h-4" />
                  </Button>

                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name={`companions.${index}.firstName`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Ime</FormLabel>
                          <FormControl>
                            <Input placeholder="Ime" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name={`companions.${index}.lastName`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Prezime</FormLabel>
                          <FormControl>
                            <Input placeholder="Prezime" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={form.control}
                    name={`companions.${index}.isAdult`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Tip</FormLabel>
                        <Select
                          onValueChange={(value) =>
                            field.onChange(value === "adult")
                          }
                          value={field.value ? "adult" : "child"}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Izaberi tip" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="adult">Odrasla osoba</SelectItem>
                            <SelectItem value="child">Dete</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              ))}
            </div>

            <Button type="submit" className="w-full">
              {updateGuest.isPending ? "Čuvanje..." : "Sačuvaj izmene"}
            </Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}


================================================
File: features/wedding/components/dashboard/edit-wedding-dialog.tsx
================================================
'use client';

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from '@/components/ui/form';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { weddingSetupSchema } from '../../schemas';
import { useUpdateWedding } from '../../hooks/mutations';
import type { WeddingDetails } from '../../types';

export function EditWeddingDialog({
  wedding,
  open,
  onOpenChange,
}: {
  wedding: WeddingDetails;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  const [error, setError] = useState<string | null>(null);
  const updateWedding = useUpdateWedding();

  const form = useForm({
    resolver: zodResolver(weddingSetupSchema),
    defaultValues: {
      brideName: wedding.brideName,
      groomName: wedding.groomName,
      venue: {
        name: wedding.venue.name,
        address: wedding.venue.address,
        hall: wedding.venue.hall,
      },
      date: wedding.date,
      pricePerPerson: String(wedding.pricePerPerson),
    },
  });

  const onSubmit = async (values: any) => {
    try {
      setError(null);
      await updateWedding.mutateAsync(values);
      onOpenChange(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Došlo je do greške pri ažuriranju podataka');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Izmena podataka o venčanju</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <div className="grid grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="brideName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ime mlade</FormLabel>
                    <FormControl>
                      <Input placeholder="Ana" {...field} className="bg-background/50" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="groomName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Ime mladoženje</FormLabel>
                    <FormControl>
                      <Input placeholder="Marko" {...field} className="bg-background/50" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-medium">Informacije o lokaciji</h3>
              <div className="grid gap-4">
                <FormField
                  control={form.control}
                  name="venue.name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Naziv lokacije</FormLabel>
                      <FormControl>
                        <Input placeholder="Hotel Grand" {...field} className="bg-background/50" />
                      </FormControl>
                      <FormDescription>
                        Unesite naziv hotela ili restorana gde će se održati venčanje
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="venue.address"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Adresa</FormLabel>
                      <FormControl>
                        <Input placeholder="Bulevar oslobođenja 1" {...field} className="bg-background/50" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="venue.hall"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Sala/Restoran</FormLabel>
                      <FormControl>
                        <Input placeholder="Kristalna dvorana" {...field} className="bg-background/50" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="date"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Datum venčanja</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} className="bg-background/50" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="pricePerPerson"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cena po osobi (EUR)</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        placeholder="50" 
                        {...field} 
                        className="bg-background/50"
                      />
                    </FormControl>
                    <FormDescription>
                      Unesite cenu menija po osobi u evrima
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <Button 
              type="submit" 
              className="w-full" 
              disabled={updateWedding.isPending}
            >
              {updateWedding.isPending ? 'Čuvanje...' : 'Sačuvaj izmene'}
            </Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

================================================
File: features/wedding/components/dashboard/group-actions.tsx
================================================
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Edit2, Trash2 } from 'lucide-react';
import { useDeleteGroup } from '../../hooks/mutations';
import { EditGroupDialog } from './edit-group-dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import type { Group } from '../../types';

export function GroupActions({ group }: { group: Group }) {
  const [isEditOpen, setIsEditOpen] = useState(false);
  const [isDeleteOpen, setIsDeleteOpen] = useState(false);
  const deleteGroup = useDeleteGroup();

  const handleDelete = async () => {
    try {
      await deleteGroup.mutateAsync(group.id);
      setIsDeleteOpen(false);
    } catch (error) {
      console.error('Error deleting group:', error);
    }
  };

  const handleEditClick = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event from bubbling up
    setIsEditOpen(true);
  };

  const handleDeleteClick = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event from bubbling up
    setIsDeleteOpen(true);
  };

  return (
    <>
      <div className="flex items-center gap-2" onClick={(e) => e.stopPropagation()}>
        <Button
          variant="ghost"
          size="icon"
          onClick={handleEditClick}
          className="h-8 w-8"
        >
          <Edit2 className="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="icon"
          onClick={handleDeleteClick}
          className="h-8 w-8 text-destructive hover:text-destructive"
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>

      <EditGroupDialog
        group={group}
        open={isEditOpen}
        onOpenChange={setIsEditOpen}
      />

      <AlertDialog open={isDeleteOpen} onOpenChange={setIsDeleteOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Brisanje grupe</AlertDialogTitle>
            <AlertDialogDescription>
              Da li ste sigurni da želite da obrišete grupu "{group.name}"?
              Svi gosti iz ove grupe će biti prebačeni u "Ostali gosti".
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Otkaži</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              {deleteGroup.isPending ? 'Brisanje...' : 'Obriši'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

================================================
File: features/wedding/components/dashboard/guest-card.tsx
================================================
"use client";

import { useState } from "react";
import {
  Phone,
  Gift,
  ScrollText,
  Users,
  Check,
  X,
  Clock,
  Edit,
  Banknote,
  Trash2,
} from "lucide-react";
import type { Guest } from "../../types";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { EditGuestDialog } from "./edit-guest-dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useDeleteGuest } from "../../hooks/mutations";

/**
 * Guest Card Component
 *
 * Displays individual guest information including:
 * - Name
 * - RSVP status
 * - Plus-one details
 * - Children information
 * - Guest side (bride/groom)
 * - Group assignment
 *
 * @component
 * @param {Object} props
 * @param {Guest} props.guest - Guest information
 */

interface GuestCardProps {
  guest: Guest;
}

export function GuestCard({ guest }: GuestCardProps) {
  const [isEditOpen, setIsEditOpen] = useState(false);
  const [isDeleteOpen, setIsDeleteOpen] = useState(false);
  const deleteGuest = useDeleteGuest();

  const attendanceConfig = {
    yes: {
      icon: Check,
      label: "Dolazi",
      class: "bg-green-500/10 text-green-500",
    },
    no: { icon: X, label: "Ne dolazi", class: "bg-red-500/10 text-red-500" },
    pending: {
      icon: Clock,
      label: "Neodređeno",
      class: "bg-yellow-500/10 text-yellow-500",
    },
  }[guest.attendance];

  const AttendanceIcon = attendanceConfig.icon;

  const handleDelete = async () => {
    try {
      await deleteGuest.mutateAsync(guest.id);
      setIsDeleteOpen(false);
    } catch (error) {
      console.error("Error deleting guest:", error);
    }
  };

  return (
    <>
      <div className="p-3  rounded-xl bg-gradient-to-br from-card to-card/50 border border-border/50 shadow-sm hover:shadow-md transition-all space-y-3 sm:space-y-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between sm:gap-4">
          <div className="flex flex-col sm:flex-row sm:items-center sm:gap-4">
            <div>
              <h4 className="font-medium text-base sm:text-lg bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
                {guest.firstName} {guest.lastName}
              </h4>
              <p className="text-xs sm:text-sm text-muted-foreground">
                {guest.side === "bride"
                  ? "Mladina strana"
                  : "Mladoženjina strana"}
              </p>
            </div>

            <div className="flex flex-wrap items-start gap-2 mt-2 sm:mt-0">
              {guest.phone && (
                <div className="flex items-center gap-2 text-xs sm:text-sm text-muted-foreground">
                  <div className="h-6 w-6 sm:h-8 sm:w-8 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                    <Phone className="w-3 h-3 sm:w-4 sm:h-4 text-primary" />
                  </div>
                  {guest.phone}
                </div>
              )}

              {guest.gift && (
                <div className="flex items-center gap-2 text-xs sm:text-sm text-muted-foreground">
                  <div className="h-6 w-6 sm:h-8 sm:w-8 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                    {guest.gift.type === "money" ? (
                      <Banknote className="w-3 h-3 sm:w-4 sm:h-4 text-primary" />
                    ) : (
                      <Gift className="w-3 h-3 sm:w-4 sm:h-4 text-primary" />
                    )}
                  </div>
                  {guest.gift.type === "money" ? (
                    <span>€{guest.gift.amount?.toLocaleString("de-DE")}</span>
                  ) : (
                    guest.gift.description
                  )}
                </div>
              )}

              {guest.notes && (
                <div className="flex items-center gap-2 text-xs sm:text-sm text-muted-foreground">
                  <div className="h-6 w-6 sm:h-8 sm:w-8 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                    <ScrollText className="w-3 h-3 sm:w-4 sm:h-4 text-primary" />
                  </div>
                  {guest.notes}
                </div>
              )}
            </div>
          </div>

          <div className="flex items-center justify-between sm:justify-end gap-2 mt-1 sm:mt-0">
            <div
              className={cn(
                "text-xs sm:text-sm font-medium px-2 sm:px-3 py-1 sm:py-1.5 rounded-full flex items-center gap-1 sm:gap-2",
                attendanceConfig.class
              )}
            >
              <AttendanceIcon className="w-3 h-3 sm:w-4 sm:h-4" />
              {attendanceConfig.label}
            </div>
            <div className="flex items-center gap-1 sm:gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsEditOpen(true)}
                className="h-7 sm:h-8 px-2 sm:px-3 text-xs sm:text-sm gap-1 sm:gap-2 hover:bg-primary/5"
              >
                <Edit className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline">Izmeni</span>
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsDeleteOpen(true)}
                className="h-7 sm:h-8 px-2 sm:px-3 text-xs sm:text-sm gap-1 sm:gap-2 hover:bg-destructive/5 hover:text-destructive"
              >
                <Trash2 className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline">Obriši</span>
              </Button>
            </div>
          </div>
        </div>

        {guest.companions.length > 0 && (
          <div className="mt-3 sm:mt-4 pt-3 sm:pt-4 border-t">
            <div className="flex items-center gap-2 text-xs sm:text-sm font-medium mb-2 sm:mb-3">
              <div className="h-6 w-6 sm:h-8 sm:w-8 rounded-lg bg-primary/10 flex items-center justify-center">
                <Users className="w-3 h-3 sm:w-4 sm:h-4 text-primary" />
              </div>
              <span>Pratioci ({guest.companions.length})</span>
            </div>
            <div className="grid gap-1 sm:gap-2 pl-8 sm:pl-10">
              {guest.companions.map((companion, index) => (
                <div
                  key={index}
                  className="text-xs sm:text-sm text-muted-foreground flex items-center gap-2"
                >
                  <div className="w-1.5 h-1.5 rounded-full bg-primary/50" />
                  <span className="font-medium">
                    {companion.firstName} {companion.lastName}
                  </span>
                  <span className="text-[10px] sm:text-xs px-1.5 sm:px-2 py-0.5 rounded-full bg-muted">
                    {companion.isAdult ? "Odrasla osoba" : "Dete"}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      <EditGuestDialog
        guest={guest}
        open={isEditOpen}
        onOpenChange={setIsEditOpen}
      />

      <AlertDialog open={isDeleteOpen} onOpenChange={setIsDeleteOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Brisanje gosta</AlertDialogTitle>
            <AlertDialogDescription>
              Da li ste sigurni da želite da obrišete gosta {guest.firstName}{" "}
              {guest.lastName}? Ova akcija je nepovratna.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Otkaži</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              {deleteGuest.isPending ? "Brisanje..." : "Obriši"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


================================================
File: features/wedding/components/dashboard/guest-groups.tsx
================================================
"use client";

import { useGroupsWithStats, useGuests } from "../../hooks/queries";
import { GuestCard } from "./guest-card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { UsersRound, ChevronDown } from "lucide-react";
import type { Side, AttendanceStatus, Guest } from "../../types";
import { Collapsible, CollapsibleContent } from "@/components/ui/collapsible";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { GroupActions } from "./group-actions";

interface GuestGroupsProps {
  selectedSide: Side | "all";
  selectedStatus: AttendanceStatus | "all";
  searchQuery: string;
}

/**
 * Guest Groups Component
 *
 * Manages guest categorization with:
 * - Custom group creation
 * - Group assignment
 * - Group statistics
 * - Filtering capabilities
 *
 * Default groups include Work, Family, Friends
 * but users can create custom groups
 *
 * @component
 * @param {Object} props
 * @param {Group[]} props.groups - Available groups
 * @param {Function} props.onGroupCreate - Handler for new group creation
 */

export function GuestGroups({
  selectedSide,
  selectedStatus,
  searchQuery,
}: GuestGroupsProps) {
  const { data: groupsWithStats = [] } = useGroupsWithStats();
  const { data: guests = [] } = useGuests();
  const [openGroups, setOpenGroups] = useState<string[]>([]);

  const toggleGroup = (groupId: string) => {
    setOpenGroups((current) =>
      current.includes(groupId)
        ? current.filter((id) => id !== groupId)
        : [...current, groupId]
    );
  };

  const expandAll = () => {
    const allGroupIds = groupsWithStats.map((group) => group.id);
    setOpenGroups(allGroupIds);
  };

  const collapseAll = () => {
    setOpenGroups([]);
  };

  const filteredGroups = groupsWithStats.filter((group) =>
    selectedSide === "all" ? true : group.side === selectedSide
  );

  const brideGroups = filteredGroups.filter((group) => group.side === "bride");
  const groomGroups = filteredGroups.filter((group) => group.side === "groom");

  const filterGuests = (guests: Guest[]) => {
    return guests.filter((guest) => {
      const matchesSearch = searchQuery
        ? `${guest.firstName} ${guest.lastName}`
            .toLowerCase()
            .includes(searchQuery.toLowerCase())
        : true;
      const matchesStatus =
        selectedStatus === "all" ? true : guest.attendance === selectedStatus;
      return matchesSearch && matchesStatus;
    });
  };

  const GroupSection = ({
    groups,
    title,
  }: {
    groups: typeof brideGroups;
    title: string;
  }) => {
    if (groups.length === 0) return null;

    return (
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">{title}</h2>
        <div className="space-y-4">
          {groups.map((group) => {
            const groupGuests = filterGuests(
              guests.filter((guest) => guest.groupId === group.id)
            );
            const isOpen = openGroups.includes(group.id);
            const totalGuests = group.stats.totalGuests;

            if (groupGuests.length === 0) return null;

            return (
              <Card key={group.id}>
                <Collapsible
                  open={isOpen}
                  onOpenChange={() => toggleGroup(group.id)}
                >
                  <div className="w-full">
                    <CardHeader
                      className="cursor-pointer p-2"
                      onClick={() => toggleGroup(group.id)}
                    >
                      <div className="flex md:items-center justify-between">
                        <div className="flex items-center gap-1 md:gap-2">
                          <CardTitle className="flex flex-col md:flex-row md:items-center gap-1 md:gap-2">
                            <div className="flex items-center gap-1 text-sm md:text-md">
                              <UsersRound className="w-5 h-5" />
                              {group.name}
                            </div>
                            <span className="text-sm font-normal text-muted-foreground">
                              (
                              {group.side === "bride"
                                ? "Mladina strana"
                                : "Mladoženjina strana"}
                              )
                            </span>
                            <span className="text-sm font-normal text-muted-foreground">
                              • {totalGuests}{" "}
                              {totalGuests === 1 ? "gost" : "gosta"}
                            </span>
                          </CardTitle>
                        </div>
                        <div className="flex items-center gap-2">
                          <GroupActions group={group} />
                          <ChevronDown
                            className={cn(
                              "h-4 w-4 text-muted-foreground transition-transform",
                              isOpen && "transform rotate-180"
                            )}
                          />
                        </div>
                      </div>
                    </CardHeader>
                  </div>
                  <CollapsibleContent>
                    <CardContent>
                      <div className="space-y-2 md:space-y-4">
                        {groupGuests.map((guest) => (
                          <GuestCard key={guest.id} guest={guest} />
                        ))}
                      </div>
                    </CardContent>
                  </CollapsibleContent>
                </Collapsible>
              </Card>
            );
          })}
        </div>
      </div>
    );
  };

  // If there are no groups at all or no filtered groups, return null
  if (groupsWithStats.length === 0 || filteredGroups.length === 0) {
    return null;
  }

  return (
    <div className="space-y-8">
      <div className="flex justify-end gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={expandAll}
          className="gap-2"
        >
          <ChevronDown className="h-4 w-4" />
          Proširi sve grupe
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={collapseAll}
          className="gap-2"
        >
          <ChevronDown className="h-4 w-4 rotate-180" />
          Skupi sve grupe
        </Button>
      </div>
      {selectedSide !== "groom" && (
        <GroupSection groups={brideGroups} title="Mladina strana" />
      )}
      {selectedSide !== "bride" && (
        <GroupSection groups={groomGroups} title="Mladoženjina strana" />
      )}
    </div>
  );
}


================================================
File: features/wedding/components/dashboard/guest-list.tsx
================================================
"use client";

import { useGuests } from "../../hooks/queries";
import { GuestCard } from "./guest-card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import type { Side, AttendanceStatus, Guest } from "../../types";
import { Collapsible, CollapsibleContent } from "@/components/ui/collapsible";
import { useState } from "react";
import { ChevronDown, Users2 } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

interface GuestListProps {
  selectedSide: Side | "all";
  selectedStatus: AttendanceStatus | "all";
  searchQuery: string;
}

export function GuestList({
  selectedSide,
  selectedStatus,
  searchQuery,
}: GuestListProps) {
  const { data: guests = [] } = useGuests();
  const [isOpen, setIsOpen] = useState(true);
  const [openSections, setOpenSections] = useState<Side[]>(["bride", "groom"]);

  const filterGuests = (guests: Guest[]) => {
    return guests.filter((guest) => {
      const matchesSearch = searchQuery
        ? `${guest.firstName} ${guest.lastName}`
            .toLowerCase()
            .includes(searchQuery.toLowerCase())
        : true;
      const matchesStatus =
        selectedStatus === "all" ? true : guest.attendance === selectedStatus;
      return matchesSearch && matchesStatus;
    });
  };

  const ungroupedGuests = filterGuests(
    guests.filter(
      (guest) =>
        !guest.groupId &&
        (selectedSide === "all" ? true : guest.side === selectedSide)
    )
  );

  const brideGuests = ungroupedGuests.filter((guest) => guest.side === "bride");
  const groomGuests = ungroupedGuests.filter((guest) => guest.side === "groom");

  // If there are no ungrouped guests, return null
  if (ungroupedGuests.length === 0) {
    return null;
  }

  const toggleSection = (side: Side) => {
    setOpenSections((current) =>
      current.includes(side)
        ? current.filter((s) => s !== side)
        : [...current, side]
    );
  };

  return (
    <Card>
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CardHeader
          className="cursor-pointer p-3"
          onClick={() => setIsOpen(!isOpen)}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Users2 className="w-4 h-4 sm:w-5 sm:h-5" />
              <CardTitle className="flex items-center gap-2 text-sm sm:text-lg">
                Ostali gosti
                <span className="text-xs sm:text-sm font-normal text-muted-foreground">
                  ({ungroupedGuests.length}{" "}
                  {ungroupedGuests.length === 1 ? "gost" : "gosta"})
                </span>
              </CardTitle>
            </div>
            <div className="flex items-center gap-1 sm:gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  setIsOpen(true);
                }}
                className="h-7 sm:h-8 px-2 sm:px-3 text-xs sm:text-sm"
              >
                <ChevronDown className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline ml-1">Proširi</span>
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  setIsOpen(false);
                }}
                className="h-7 sm:h-8 px-2 sm:px-3 text-xs sm:text-sm"
              >
                <ChevronDown className="h-3 w-3 sm:h-4 sm:w-4 rotate-180" />
                <span className="hidden sm:inline ml-1">Skupi</span>
              </Button>
            </div>
          </div>
        </CardHeader>
        <CollapsibleContent>
          <CardContent className="p-3 sm:p-6 pt-0 sm:pt-0">
            <div className="space-y-4 sm:space-y-8">
              {selectedSide !== "groom" && brideGuests.length > 0 && (
                <Collapsible open={openSections.includes("bride")}>
                  <div
                    className="flex items-center justify-between cursor-pointer py-2"
                    onClick={() => toggleSection("bride")}
                  >
                    <h3 className="text-sm sm:text-lg font-medium">
                      Mladina strana
                    </h3>
                    <ChevronDown
                      className={cn(
                        "h-4 w-4 text-muted-foreground transition-transform",
                        openSections.includes("bride") && "transform rotate-180"
                      )}
                    />
                  </div>
                  <CollapsibleContent>
                    <div className="space-y-3 sm:space-y-4 mt-3">
                      {brideGuests.map((guest) => (
                        <GuestCard key={guest.id} guest={guest} />
                      ))}
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              )}

              {selectedSide !== "bride" && groomGuests.length > 0 && (
                <Collapsible open={openSections.includes("groom")}>
                  <div
                    className="flex items-center justify-between cursor-pointer py-2"
                    onClick={() => toggleSection("groom")}
                  >
                    <h3 className="text-sm sm:text-lg font-medium">
                      Mladoženjina strana
                    </h3>
                    <ChevronDown
                      className={cn(
                        "h-4 w-4 text-muted-foreground transition-transform",
                        openSections.includes("groom") && "transform rotate-180"
                      )}
                    />
                  </div>
                  <CollapsibleContent>
                    <div className="space-y-3 sm:space-y-4 mt-3">
                      {groomGuests.map((guest) => (
                        <GuestCard key={guest.id} guest={guest} />
                      ))}
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              )}
            </div>
          </CardContent>
        </CollapsibleContent>
      </Collapsible>
    </Card>
  );
}


================================================
File: features/wedding/components/dashboard/index.tsx
================================================
"use client";

import { GuestGroups } from "./guest-groups";
import { GuestList } from "./guest-list";
import { AddGroupDialog } from "./add-group-dialog";
import { AddGuestDialog } from "./add-guest-dialog";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { PlusCircle, UserPlus, Users2, UsersRound, Search } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { useFilterStore } from "../../stores/filter-store";
import type { Side, AttendanceStatus } from "../../types";

/**
 * Wedding Dashboard Component
 *
 * Main dashboard for wedding planning application that displays:
 * - Wedding header with basic info
 * - Statistics about guests and costs
 * - Guest groups management
 * - Individual guest cards
 *
 * Features:
 * - Track RSVPs and plus-ones
 * - Monitor children guests (under 6-8 don't count for full seat)
 * - Flexible guest grouping (Work, Family, Friends, etc.)
 * - Separate tracking for bride's and groom's guests
 * - Gift registry integration
 * - Smart cost calculations
 *
 * @component
 * @example
 * return (
 *   <WeddingDashboard />
 * )
 */

export function Dashboard() {
  const [isAddGroupOpen, setIsAddGroupOpen] = useState(false);
  const [isAddGuestOpen, setIsAddGuestOpen] = useState(false);

  const {
    viewMode,
    selectedSide,
    selectedStatus,
    searchQuery,
    setViewMode,
    setSelectedSide,
    setSelectedStatus,
    setSearchQuery,
  } = useFilterStore();

  return (
    <div className="space-y-6 sm:space-y-8">
      <div className="bg-card  rounded-lg shadow-sm space-y-4">
        {/* View Mode Buttons */}
        <div className="grid grid-cols-3 gap-2 sm:flex sm:flex-wrap sm:items-center sm:gap-4">
          <Button
            variant={viewMode === "all" ? "default" : "outline"}
            onClick={() => setViewMode("all")}
            className="w-full sm:w-auto gap-2"
            size="sm"
          >
            <Users2 className="w-4 h-4" />
            <span className="hidden sm:inline">Svi gosti</span>
            <span className="sm:hidden">Svi</span>
          </Button>
          <Button
            variant={viewMode === "groups" ? "default" : "outline"}
            onClick={() => setViewMode("groups")}
            className="w-full sm:w-auto gap-2"
            size="sm"
          >
            <UsersRound className="w-4 h-4" />
            <span className="hidden sm:inline">Grupe</span>
            <span className="sm:hidden">Grupe</span>
          </Button>
          <Button
            variant={viewMode === "ungrouped" ? "default" : "outline"}
            onClick={() => setViewMode("ungrouped")}
            className="w-full sm:w-auto gap-2"
            size="sm"
          >
            <Users2 className="w-4 h-4" />
            <span className="hidden sm:inline">Ostali gosti</span>
            <span className="sm:hidden">Ostali</span>
          </Button>
        </div>

        {/* Filters and Actions */}
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <Select
              value={selectedSide}
              onValueChange={(value: Side | "all") => setSelectedSide(value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Izaberi stranu" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Sve strane</SelectItem>
                <SelectItem value="bride">Mladina strana</SelectItem>
                <SelectItem value="groom">Mladoženjina strana</SelectItem>
              </SelectContent>
            </Select>

            <Select
              value={selectedStatus}
              onValueChange={(value: AttendanceStatus | "all") =>
                setSelectedStatus(value)
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Status dolaska" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Svi statusi</SelectItem>
                <SelectItem value="yes">Dolazi</SelectItem>
                <SelectItem value="no">Ne dolazi</SelectItem>
                <SelectItem value="pending">Neodređeno</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-2 gap-2">
            <Button
              onClick={() => setIsAddGroupOpen(true)}
              variant="outline"
              size="sm"
            >
              <PlusCircle className="w-4 h-4 mr-2" />
              <span className="hidden sm:inline">Nova grupa</span>
              <span className="sm:hidden">Grupa</span>
            </Button>
            <Button onClick={() => setIsAddGuestOpen(true)} size="sm">
              <UserPlus className="w-4 h-4 mr-2" />
              <span className="hidden sm:inline">Novi gost</span>
              <span className="sm:hidden">Gost</span>
            </Button>
          </div>

          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Pretraži goste po imenu ili prezimenu..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
      </div>

      <div className="space-y-6 sm:space-y-8">
        {(viewMode === "all" || viewMode === "groups") && (
          <GuestGroups
            selectedSide={selectedSide}
            selectedStatus={selectedStatus}
            searchQuery={searchQuery}
          />
        )}
        {(viewMode === "all" || viewMode === "ungrouped") && (
          <GuestList
            selectedSide={selectedSide}
            selectedStatus={selectedStatus}
            searchQuery={searchQuery}
          />
        )}
      </div>

      <AddGroupDialog open={isAddGroupOpen} onOpenChange={setIsAddGroupOpen} />
      <AddGuestDialog open={isAddGuestOpen} onOpenChange={setIsAddGuestOpen} />
    </div>
  );
}


================================================
File: features/wedding/components/dashboard/share-wedding-dialog.tsx
================================================
'use client';

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useShareWedding } from '../../hooks/mutations';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Check, Copy, Mail } from 'lucide-react';

export function ShareWeddingDialog({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  const [email, setEmail] = useState('');
  const [copied, setCopied] = useState(false);
  const shareWedding = useShareWedding();

  const handleShare = async (e: React.FormEvent) => {
    e.preventDefault();
    if (email.trim()) {
      shareWedding.mutate(
        { email: email.trim() },
        {
          onSuccess: () => {
            setEmail('');
            onOpenChange(false);
          },
        }
      );
    }
  };

  const copyInviteLink = () => {
    // U produkciji bi ovo bio stvarni link za pozivnicu
    navigator.clipboard.writeText(`${window.location.origin}/invite/[code]`);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Podeli pristup venčanju</DialogTitle>
          <DialogDescription>
            Pošalji pozivnicu mladoj ili drugim organizatorima da pristupe evidenciji gostiju.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleShare} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email adresa</Label>
            <div className="flex gap-2">
              <Input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="email@example.com"
                className="flex-1"
              />
              <Button type="submit" disabled={shareWedding.isPending}>
                <Mail className="w-4 h-4 mr-2" />
                Pošalji
              </Button>
            </div>
          </div>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">Ili</span>
            </div>
          </div>

          <div className="space-y-2">
            <Label>Link za pozivnicu</Label>
            <div className="flex gap-2">
              <Input
                readOnly
                value={`${window.location.origin}/invite/[code]`}
                className="flex-1"
              />
              <Button
                type="button"
                variant="outline"
                onClick={copyInviteLink}
                className={copied ? "text-green-600" : ""}
              >
                {copied ? (
                  <Check className="w-4 h-4" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </Button>
            </div>
          </div>

          {shareWedding.isError && (
            <Alert variant="destructive">
              <AlertDescription>
                Došlo je do greške prilikom deljenja pristupa.
              </AlertDescription>
            </Alert>
          )}
        </form>
      </DialogContent>
    </Dialog>
  );
}

================================================
File: features/wedding/components/dashboard/wedding-header.tsx
================================================
"use client";

import { useWeddingDetails } from "../../hooks/queries";
import {
  CalendarDays,
  MapPin,
  Building2,
  Gift,
  LogOut,
  Share2,
  Settings,
} from "lucide-react";
import { WeddingStats } from "./wedding-stats";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { useAuth } from "@/features/auth/hooks/use-auth";
import { ShareWeddingDialog } from "./share-wedding-dialog";
import { EditWeddingDialog } from "./edit-wedding-dialog";
import { useState } from "react";

/**
 * Wedding Header Component
 *
 * Displays wedding overview information:
 * - Couple names
 * - Wedding date
 * - Location
 * - Quick action buttons
 *
 * @component
 * @param {Object} props
 * @param {WeddingDetails} props.details - Wedding information
 */

function LoadingSkeleton() {
  return (
    <Card className="p-8 animate-pulse">
      <div className="space-y-4">
        <div className="h-8 bg-muted rounded w-1/3 mx-auto" />
        <div className="h-4 bg-muted rounded w-1/4 mx-auto" />
      </div>
    </Card>
  );
}

export function WeddingHeader() {
  const { data: weddingDetails, isLoading, isError } = useWeddingDetails();
  const { signOut } = useAuth();
  const [isShareOpen, setIsShareOpen] = useState(false);
  const [isEditOpen, setIsEditOpen] = useState(false);

  if (isLoading) {
    return <LoadingSkeleton />;
  }

  if (isError || !weddingDetails || !weddingDetails.venue) {
    return (
      <Card className="p-8">
        <div className="text-center text-muted-foreground">
          Došlo je do greške pri učitavanju podataka o venčanju.
        </div>
      </Card>
    );
  }

  return (
    <div className="space-y-4 sm:space-y-6">
      <Card className="overflow-hidden">
        <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent p-4">
          {/* Mobile Action Buttons */}
          <div className="grid grid-cols-4 gap-2 mb-4 sm:hidden">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsEditOpen(true)}
              className="w-full"
            >
              <Settings className="w-4 h-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsShareOpen(true)}
              className="w-full"
            >
              <Share2 className="w-4 h-4" />
            </Button>
            <Button variant="outline" size="sm" asChild className="w-full">
              <Link href="/gifts">
                <Gift className="w-4 h-4" />
              </Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={signOut}
              className="w-full text-destructive hover:text-destructive"
            >
              <LogOut className="w-4 h-4" />
            </Button>
          </div>

          {/* Desktop Action Buttons */}
          <div className="hidden sm:flex flex-wrap gap-2 justify-end mb-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsEditOpen(true)}
              className="hover:bg-primary/5"
            >
              <Settings className="w-4 h-4 mr-2" />
              Izmeni podatke
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsShareOpen(true)}
              className="hover:bg-primary/5"
            >
              <Share2 className="w-4 h-4 mr-2" />
              Podeli pristup
            </Button>
            <Button
              variant="outline"
              size="sm"
              asChild
              className="hover:bg-primary/5"
            >
              <Link href="/gifts" className="flex items-center gap-2">
                <Gift className="w-4 h-4" />
                Pregled poklona
              </Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={signOut}
              className="hover:bg-destructive/5 hover:text-destructive"
            >
              <LogOut className="w-4 h-4 mr-2" />
              Odjavi se
            </Button>
          </div>

          <div className="text-center space-y-3">
            <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
              {weddingDetails.brideName} & {weddingDetails.groomName}
            </h1>
            <div className="flex flex-col sm:flex-row items-center justify-center gap-2 sm:gap-4 text-muted-foreground text-sm">
              <div className="flex items-center gap-2">
                <CalendarDays className="w-4 h-4" />
                <time className="font-medium">
                  {new Date(weddingDetails.date).toLocaleDateString("sr-RS", {
                    day: "numeric",
                    month: "long",
                    year: "numeric",
                  })}
                </time>
              </div>
              {weddingDetails.venue.name && (
                <>
                  <span className="hidden sm:inline">•</span>
                  <div className="flex items-center gap-2">
                    <MapPin className="w-4 h-4" />
                    <span className="font-medium">
                      {weddingDetails.venue.name}
                    </span>
                  </div>
                </>
              )}
              {weddingDetails.venue.hall && (
                <>
                  <span className="hidden sm:inline">•</span>
                  <div className="flex items-center gap-2">
                    <Building2 className="w-4 h-4" />
                    <span className="font-medium">
                      {weddingDetails.venue.hall}
                    </span>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </Card>

      <WeddingStats />
      <ShareWeddingDialog open={isShareOpen} onOpenChange={setIsShareOpen} />
      <EditWeddingDialog
        wedding={weddingDetails}
        open={isEditOpen}
        onOpenChange={setIsEditOpen}
      />
    </div>
  );
}


================================================
File: features/wedding/components/dashboard/wedding-stats.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import { useWeddingStats } from "../../hooks/queries";
import { Users, Wallet, UserCheck, UserMinus } from "lucide-react";

interface StatCardProps {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  description?: string;
  className?: string;
}

function StatCard({
  title,
  value,
  icon,
  description,
  className,
}: StatCardProps) {
  return (
    <div
      className={cn(
        "relative overflow-hidden rounded-xl bg-gradient-to-br from-card to-card/50 p-4 sm:p-6 shadow-md border border-border/50",
        className
      )}
    >
      <div className="flex items-center gap-4">
        <div className="h-10 w-10 sm:h-12 sm:w-12 rounded-xl bg-primary/10 flex items-center justify-center flex-shrink-0">
          {icon}
        </div>
        <div>
          <p className="text-xs sm:text-sm font-medium text-muted-foreground">
            {title}
          </p>
          <p className="text-xl sm:text-2xl font-bold tracking-tight bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
            {value}
          </p>
          {description && (
            <p className="text-xs text-muted-foreground mt-1">{description}</p>
          )}
        </div>
      </div>
    </div>
  );
}

/**
 * Wedding Statistics Component
 *
 * Displays key wedding metrics:
 * - Total guest count
 * - Confirmed guests
 * - Children count (with age consideration)
 * - Cost calculations
 * - Group distribution
 *
 * Special handling for children under 6-8 years
 * who don't count towards full seat costs
 *
 * @component
 */

export function WeddingStats() {
  const stats = useWeddingStats();

  return (
    <div className="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6">
      <StatCard
        title="Ukupno gostiju"
        value={stats.totalGuests}
        icon={<Users className="w-5 h-5 sm:w-6 sm:h-6 text-primary" />}
        description={`${stats.totalAdults} odraslih, ${stats.totalChildren} dece`}
        className="col-span-2 md:col-span-1"
      />
      <StatCard
        title="Odrasli"
        value={stats.totalAdults}
        icon={<UserCheck className="w-5 h-5 sm:w-6 sm:h-6 text-primary" />}
      />
      <StatCard
        title="Deca"
        value={stats.totalChildren}
        icon={<UserMinus className="w-5 h-5 sm:w-6 sm:h-6 text-primary" />}
      />
      <StatCard
        title="Ukupan trošak"
        value={`€${stats.totalCost.toLocaleString("de-DE")}`}
        icon={<Wallet className="w-5 h-5 sm:w-6 sm:h-6 text-primary" />}
        className="col-span-2 md:col-span-1"
      />
    </div>
  );
}


================================================
File: features/wedding/components/setup/index.tsx
================================================
'use client';

import { WeddingSetupForm } from './wedding-setup-form';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Heart } from 'lucide-react';

export function WeddingSetup() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center p-4">
      <div className="container max-w-7xl">
        <Card className="w-full max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle className="text-center flex items-center justify-center gap-2">
              <Heart className="text-pink-500" />
              Dobrodošli u aplikaciju za evidenciju gostiju
            </CardTitle>
          </CardHeader>
          <CardContent>
            <WeddingSetupForm />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================================================
File: features/wedding/components/setup/wedding-setup-form.tsx
================================================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useState } from "react";
import { weddingSetupSchema } from "../../schemas";
import { useSetupWedding } from "../../hooks/mutations";
import type { WeddingSetupFormData } from "../../types";

export function WeddingSetupForm() {
  const [error, setError] = useState<string | null>(null);
  const { mutate: setupWedding, isPending } = useSetupWedding();

  const form = useForm<WeddingSetupFormData>({
    resolver: zodResolver(weddingSetupSchema),
    defaultValues: {
      brideName: "",
      groomName: "",
      venue: {
        name: "",
        address: "",
        hall: "",
      },
      date: "",
      pricePerPerson: 0,
    },
  });

  async function onSubmit(values: WeddingSetupFormData) {
    try {
      setError(null);
      await setupWedding(values);
    } catch (err) {
      setError(
        err instanceof Error
          ? err.message
          : "Došlo je do greške pri kreiranju venčanja"
      );
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="grid grid-cols-2 gap-6">
          <FormField
            control={form.control}
            name="brideName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Ime mlade</FormLabel>
                <FormControl>
                  <Input
                    placeholder="Ana"
                    {...field}
                    className="bg-background/50"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="groomName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Ime mladoženje</FormLabel>
                <FormControl>
                  <Input
                    placeholder="Marko"
                    {...field}
                    className="bg-background/50"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div className="space-y-4">
          <h3 className="text-lg font-medium">Informacije o lokaciji</h3>
          <div className="grid gap-4">
            <FormField
              control={form.control}
              name="venue.name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Naziv lokacije</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Hotel Grand"
                      {...field}
                      className="bg-background/50"
                    />
                  </FormControl>
                  <FormDescription>
                    Unesite naziv hotela ili restorana gde će se održati
                    venčanje
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="venue.address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Adresa</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Bulevar oslobođenja 1"
                      {...field}
                      className="bg-background/50"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="venue.hall"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Sala/Restoran</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Kristalna dvorana"
                      {...field}
                      className="bg-background/50"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </div>

        <div className="grid grid-cols-2 gap-6">
          <FormField
            control={form.control}
            name="date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Datum venčanja</FormLabel>
                <FormControl>
                  <Input type="date" {...field} className="bg-background/50" />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="pricePerPerson"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Cena po osobi (EUR)</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    placeholder="50"
                    {...field}
                    className="bg-background/50"
                  />
                </FormControl>
                <FormDescription>
                  Unesite cenu menija po osobi u evrima
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {error && (
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <Button
          type="submit"
          className="w-full bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70"
          disabled={isPending}
        >
          {isPending ? "Učitavanje..." : "Započni evidenciju"}
        </Button>
      </form>
    </Form>
  );
}


================================================
File: features/wedding/hooks/mutations.ts
================================================
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { api } from '../lib/api';
import { queryKeys } from './query-keys';
import type { Guest, Group, Side, WeddingSetupFormData } from '../types';

export function useSetupWedding() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: WeddingSetupFormData) => api.setupWedding(data),
    onSuccess: (data) => {
      queryClient.setQueryData(queryKeys.weddingDetails, data);
    },
  });
}

export function useUpdateWedding() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: WeddingSetupFormData) => api.updateWedding(data),
    onSuccess: (data) => {
      queryClient.setQueryData(queryKeys.weddingDetails, data);
    },
  });
}

export function useAddGuest() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (guest: Omit<Guest, 'id'>) => api.addGuest(guest),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.guests });
      queryClient.invalidateQueries({ queryKey: queryKeys.groupsWithStats });
    },
  });
}

export function useUpdateGuest() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, guest }: { id: string; guest: Partial<Guest> }) => 
      api.updateGuest(id, guest),
    onSuccess: () => {
      // Invalidate both guests and groups with stats queries
      queryClient.invalidateQueries({ queryKey: queryKeys.guests });
      queryClient.invalidateQueries({ queryKey: queryKeys.groupsWithStats });
    },
  });
}

export function useDeleteGuest() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (id: string) => api.deleteGuest(id),
    onSuccess: () => {
      // Invalidate both guests and groups with stats queries
      queryClient.invalidateQueries({ queryKey: queryKeys.guests });
      queryClient.invalidateQueries({ queryKey: queryKeys.groupsWithStats });
    },
  });
}

export function useAddGroup() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ name, side }: { name: string; side: Side }) => 
      api.addGroup(name, side),
    onSuccess: () => {
      // Invalidate both groups and groups with stats queries
      queryClient.invalidateQueries({ queryKey: queryKeys.groups });
      queryClient.invalidateQueries({ queryKey: queryKeys.groupsWithStats });
    },
  });
}

export function useUpdateGroup() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: Partial<Group> }) => 
      api.updateGroup(id, updates),
    onSuccess: () => {
      // Invalidate both groups and groups with stats queries
      queryClient.invalidateQueries({ queryKey: queryKeys.groups });
      queryClient.invalidateQueries({ queryKey: queryKeys.groupsWithStats });
    },
  });
}

export function useDeleteGroup() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (id: string) => api.deleteGroup(id),
    onSuccess: () => {
      // Invalidate all related queries
      queryClient.invalidateQueries({ queryKey: queryKeys.groups });
      queryClient.invalidateQueries({ queryKey: queryKeys.groupsWithStats });
      queryClient.invalidateQueries({ queryKey: queryKeys.guests });
    },
  });
}

export function useShareWedding() {
  return useMutation({
    mutationFn: ({ email }: { email: string }) => api.shareWedding(email),
  });
}

================================================
File: features/wedding/hooks/queries.ts
================================================
import { useQuery } from '@tanstack/react-query';
import { api } from '../lib/api';
import { queryKeys } from './query-keys';
import type { GroupWithStats } from '../types';

export function useWeddingDetails() {
  return useQuery({
    queryKey: queryKeys.weddingDetails,
    queryFn: api.getWeddingDetails,
  });
}

export function useGroups() {
  return useQuery({
    queryKey: queryKeys.groups,
    queryFn: api.getGroups,
  });
}

export function useGuests() {
  return useQuery({
    queryKey: queryKeys.guests,
    queryFn: api.getGuests,
  });
}

export function useGroupsWithStats() {
  return useQuery<GroupWithStats[]>({
    queryKey: queryKeys.groupsWithStats,
    queryFn: api.getGroupsWithStats,
  });
}

export function useWeddingStats() {
  const { data: guests = [] } = useGuests();
  const { data: weddingDetails } = useWeddingDetails();

  if (!guests || !weddingDetails) {
    return {
      totalGuests: 0,
      totalAdults: 0,
      totalChildren: 0,
      totalCost: 0,
      totalGiftAmount: 0,
    };
  }

  // Count primary guests (they are always adults)
  const primaryGuestsCount = guests.length;
  
  // Count all companions
  const companionStats = guests.reduce((acc, guest) => {
    const adultCompanions = guest.companions.filter(c => c.isAdult).length;
    const childCompanions = guest.companions.filter(c => !c.isAdult).length;
    return {
      adults: acc.adults + adultCompanions,
      children: acc.children + childCompanions
    };
  }, { adults: 0, children: 0 });

  // Calculate total gift amount
  const totalGiftAmount = guests.reduce((acc, guest) => {
    if (guest.gift?.type === 'money' && guest.gift.amount) {
      return acc + guest.gift.amount;
    }
    return acc;
  }, 0);

  const totalAdults = primaryGuestsCount + companionStats.adults;
  const totalChildren = companionStats.children;
  const totalGuests = totalAdults + totalChildren;
  const totalCost = totalAdults * weddingDetails.pricePerPerson;

  return {
    totalGuests,
    totalAdults,
    totalChildren,
    totalCost,
    totalGiftAmount,
  };
}

================================================
File: features/wedding/hooks/query-keys.ts
================================================
export const queryKeys = {
  weddingDetails: ['weddingDetails'] as const,
  groups: ['groups'] as const,
  guests: ['guests'] as const,
  groupsWithStats: ['groupsWithStats'] as const,
} as const;

================================================
File: features/wedding/lib/api.ts
================================================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type { WeddingSetupFormData, WeddingDetails, Guest, Group, GroupWithStats } from '../types';

const supabase = createClientComponentClient();

const api = {
  setupWedding: async (data: WeddingSetupFormData): Promise<WeddingDetails> => {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) throw new Error('Korisnik nije prijavljen');

    // Create the wedding
    const { data: wedding, error } = await supabase
      .from('weddings')
      .insert({
        bride_name: data.brideName,
        groom_name: data.groomName,
        date: data.date,
        venue_name: data.venue.name,
        venue_address: data.venue.address,
        venue_hall: data.venue.hall,
        price_per_person: Number(data.pricePerPerson),
        user_id: session.session.user.id,
      })
      .select()
      .single();

    if (error) throw error;
    if (!wedding) throw new Error('Greška pri kreiranju venčanja');

    return {
      id: wedding.id,
      brideName: wedding.bride_name,
      groomName: wedding.groom_name,
      date: wedding.date,
      venue: {
        name: wedding.venue_name,
        address: wedding.venue_address,
        hall: wedding.venue_hall,
      },
      pricePerPerson: wedding.price_per_person,
    };
  },

  updateWedding: async (data: WeddingSetupFormData): Promise<WeddingDetails> => {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) throw new Error('Korisnik nije prijavljen');

    const { data: wedding, error } = await supabase
      .from('weddings')
      .update({
        bride_name: data.brideName,
        groom_name: data.groomName,
        date: data.date,
        venue_name: data.venue.name,
        venue_address: data.venue.address,
        venue_hall: data.venue.hall,
        price_per_person: Number(data.pricePerPerson),
      })
      .eq('user_id', session.session.user.id)
      .select()
      .single();

    if (error) throw error;
    if (!wedding) throw new Error('Greška pri ažuriranju venčanja');

    return {
      id: wedding.id,
      brideName: wedding.bride_name,
      groomName: wedding.groom_name,
      date: wedding.date,
      venue: {
        name: wedding.venue_name,
        address: wedding.venue_address,
        hall: wedding.venue_hall,
      },
      pricePerPerson: wedding.price_per_person,
    };
  },

  getWeddingDetails: async (): Promise<WeddingDetails | null> => {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) return null;

    const { data: wedding, error } = await supabase
      .from('weddings')
      .select()
      .eq('user_id', session.session.user.id)
      .single();

    if (error) {
      if (error.code === 'PGRST116') return null; // No rows returned
      throw error;
    }
    if (!wedding) return null;

    return {
      id: wedding.id,
      brideName: wedding.bride_name,
      groomName: wedding.groom_name,
      date: wedding.date,
      venue: {
        name: wedding.venue_name,
        address: wedding.venue_address,
        hall: wedding.venue_hall,
      },
      pricePerPerson: wedding.price_per_person,
    };
  },

  getGroups: async (): Promise<Group[]> => {
    const { data: groups, error } = await supabase
      .from('groups')
      .select('*')
      .order('name');

    if (error) throw error;

    return groups.map(group => ({
      id: group.id,
      name: group.name,
      side: group.side,
    }));
  },

  getGuests: async (): Promise<Guest[]> => {
    const { data: guests, error: guestsError } = await supabase
      .from('guests')
      .select(`
        *,
        companions (*),
        gifts (*)
      `)
      .order('created_at');

    if (guestsError) throw guestsError;

    return guests.map(guest => ({
      id: guest.id,
      firstName: guest.first_name,
      lastName: guest.last_name,
      phone: guest.phone,
      attendance: guest.attendance,
      side: guest.side,
      groupId: guest.group_id,
      notes: guest.notes,
      companions: guest.companions.map((companion: any) => ({
        id: companion.id,
        firstName: companion.first_name,
        lastName: companion.last_name,
        isAdult: companion.is_adult,
      })),
      gift: guest.gifts[0] ? {
        type: guest.gifts[0].type,
        description: guest.gifts[0].description,
        amount: guest.gifts[0].amount,
      } : undefined,
    }));
  },

  getGroupsWithStats: async (): Promise<GroupWithStats[]> => {
    const { data: groups, error } = await supabase
      .from('groups')
      .select(`
        *,
        guests (
          *,
          companions (*),
          gifts (*)
        )
      `)
      .order('name');

    if (error) throw error;

    return groups.map(group => {
      const guests = group.guests || [];
      const companions = guests.flatMap((g: any) => g.companions || []);
      const giftAmount = guests.reduce((acc: number, guest: any) => {
        const gift = guest.gifts[0];
        return acc + (gift?.type === 'money' ? gift.amount : 0);
      }, 0);

      return {
        id: group.id,
        name: group.name,
        side: group.side,
        stats: {
          totalGuests: guests.length + companions.length,
          totalAdults: guests.length + companions.filter((c: any) => c.is_adult).length,
          totalChildren: companions.filter((c: any) => !c.is_adult).length,
          totalGiftAmount: giftAmount,
        },
      };
    });
  },

  addGuest: async (guest: Omit<Guest, 'id'>): Promise<void> => {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) throw new Error('Korisnik nije prijavljen');

    const { data: wedding } = await supabase
      .from('weddings')
      .select('id')
      .eq('user_id', session.session.user.id)
      .single();

    if (!wedding) throw new Error('Venčanje nije pronađeno');

    const { data: newGuest, error: guestError } = await supabase
      .from('guests')
      .insert({
        first_name: guest.firstName,
        last_name: guest.lastName,
        phone: guest.phone,
        attendance: guest.attendance,
        side: guest.side,
        group_id: guest.groupId,
        notes: guest.notes,
        wedding_id: wedding.id,
      })
      .select()
      .single();

    if (guestError) throw guestError;

    if (guest.companions?.length > 0) {
      const { error: companionsError } = await supabase
        .from('companions')
        .insert(
          guest.companions.map(companion => ({
            first_name: companion.firstName,
            last_name: companion.lastName,
            is_adult: companion.isAdult,
            guest_id: newGuest.id,
          }))
        );

      if (companionsError) throw companionsError;
    }

    if (guest.gift && guest.gift.type) {
      const giftData = {
        type: guest.gift.type,
        guest_id: newGuest.id,
        description: guest.gift.type === 'other' ? guest.gift.description : null,
        amount: guest.gift.type === 'money' ? guest.gift.amount : null,
      };

      const { error: giftError } = await supabase
        .from('gifts')
        .insert(giftData);

      if (giftError) throw giftError;
    }
  },

  updateGuest: async (id: string, updates: Partial<Guest>): Promise<void> => {
    const { error: guestError } = await supabase
      .from('guests')
      .update({
        first_name: updates.firstName,
        last_name: updates.lastName,
        phone: updates.phone,
        attendance: updates.attendance,
        side: updates.side,
        group_id: updates.groupId,
        notes: updates.notes,
      })
      .eq('id', id);

    if (guestError) throw guestError;

    if (updates.companions) {
      // Delete existing companions
      await supabase
        .from('companions')
        .delete()
        .eq('guest_id', id);

      // Add new companions
      if (updates.companions.length > 0) {
        const { error: companionsError } = await supabase
          .from('companions')
          .insert(
            updates.companions.map(companion => ({
              first_name: companion.firstName,
              last_name: companion.lastName,
              is_adult: companion.isAdult,
              guest_id: id,
            }))
          );

        if (companionsError) throw companionsError;
      }
    }

    if (updates.gift !== undefined) {
      // Delete existing gift
      await supabase
        .from('gifts')
        .delete()
        .eq('guest_id', id);

      // Add new gift if it has a valid type
      if (updates.gift && updates.gift.type) {
        const giftData = {
          type: updates.gift.type,
          guest_id: id,
          description: updates.gift.type === 'other' ? updates.gift.description : null,
          amount: updates.gift.type === 'money' ? updates.gift.amount : null,
        };

        const { error: giftError } = await supabase
          .from('gifts')
          .insert(giftData);

        if (giftError) throw giftError;
      }
    }
  },

  deleteGuest: async (id: string): Promise<void> => {
    const { error } = await supabase
      .from('guests')
      .delete()
      .eq('id', id);

    if (error) throw error;
  },

  addGroup: async (name: string, side: Guest['side']): Promise<void> => {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) throw new Error('Korisnik nije prijavljen');

    const { data: wedding } = await supabase
      .from('weddings')
      .select('id')
      .eq('user_id', session.session.user.id)
      .single();

    if (!wedding) throw new Error('Venčanje nije pronađeno');

    const { error } = await supabase
      .from('groups')
      .insert({
        name,
        side,
        wedding_id: wedding.id,
      });

    if (error) throw error;
  },

  updateGroup: async (id: string, updates: Partial<Group>): Promise<void> => {
    const { error } = await supabase
      .from('groups')
      .update(updates)
      .eq('id', id);

    if (error) throw error;
  },

  deleteGroup: async (id: string): Promise<void> => {
    const { error } = await supabase
      .from('groups')
      .delete()
      .eq('id', id);

    if (error) throw error;
  },

  shareWedding: async (email: string): Promise<void> => {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) throw new Error('Korisnik nije prijavljen');

    const { data: wedding } = await supabase
      .from('weddings')
      .select('id')
      .eq('user_id', session.session.user.id)
      .single();

    if (!wedding) throw new Error('Venčanje nije pronađeno');

    const { error } = await supabase
      .from('wedding_collaborators')
      .insert({
        wedding_id: wedding.id,
        email: email,
      });

    if (error) throw error;
  },
};

export { api };

================================================
File: features/wedding/lib/dummy-data.ts
================================================
import type { WeddingDetails, Guest, Group } from '../types';

export const dummyWeddingDetails: WeddingDetails = {
  id: 'wedding-1',
  brideName: "Ana Petrović",
  groomName: "Marko Jovanović",
  venue: {
    name: "Hotel Grand",
    address: "Bulevar oslobođenja 1",
    hall: "Kristalna dvorana"
  },
  date: "2024-08-15",
  pricePerPerson: 5000
};

export const dummyGroups: Group[] = [
  {
    id: "g1",
    name: "Uža porodica",
    side: "bride"
  },
  {
    id: "g2",
    name: "Prijatelji",
    side: "bride"
  },
  {
    id: "g3",
    name: "Uža porodica",
    side: "groom"
  },
  {
    id: "g4",
    name: "Kolege",
    side: "groom"
  },
  {
    id: "g5",
    name: "Rodbina",
    side: "bride"
  },
  {
    id: "g6",
    name: "Rodbina",
    side: "groom"
  },
  {
    id: "g7",
    name: "Fakultet",
    side: "bride"
  },
  {
    id: "g8",
    name: "Komšije",
    side: "groom"
  }
];

export const dummyGuests: Guest[] = [
  // Mladina strana - Uža porodica (g1)
  {
    id: "1",
    firstName: "Milica",
    lastName: "Petrović",
    phone: "0641234567",
    attendance: "yes",
    side: "bride",
    groupId: "g1",
    gift: {
      type: "money",
      amount: 50000
    },
    notes: "Majka mlade",
    companions: [
      {
        id: "c1",
        firstName: "Petar",
        lastName: "Petrović",
        isAdult: true
      }
    ]
  },
  {
    id: "2",
    firstName: "Dragana",
    lastName: "Petrović",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g1",
    gift: {
      type: "money",
      amount: 30000
    },
    notes: "Tetka mlade",
    companions: [
      {
        id: "c2",
        firstName: "Milan",
        lastName: "Petrović",
        isAdult: true
      }
    ]
  },
  {
    id: "3",
    firstName: "Jelena",
    lastName: "Petrović",
    phone: "0631234567",
    attendance: "yes",
    side: "bride",
    groupId: "g1",
    notes: "Sestra mlade",
    companions: []
  },

  // Mladina strana - Prijatelji (g2)
  {
    id: "4",
    firstName: "Jana",
    lastName: "Đorđević",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g2",
    gift: {
      type: "money",
      amount: 20000
    },
    companions: [
      {
        id: "c3",
        firstName: "Stefan",
        lastName: "Đorđević",
        isAdult: true
      }
    ]
  },
  {
    id: "5",
    firstName: "Tamara",
    lastName: "Nikolić",
    phone: "0631234567",
    attendance: "pending",
    side: "bride",
    groupId: "g2",
    companions: []
  },

  // Mladina strana - Rodbina (g5)
  {
    id: "6",
    firstName: "Zoran",
    lastName: "Petrović",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g5",
    gift: {
      type: "other",
      description: "Set posuđa"
    },
    companions: [
      {
        id: "c4",
        firstName: "Svetlana",
        lastName: "Petrović",
        isAdult: true
      },
      {
        id: "c5",
        firstName: "Marko",
        lastName: "Petrović",
        isAdult: false
      }
    ]
  },
  {
    id: "7",
    firstName: "Goran",
    lastName: "Petrović",
    phone: "0631234567",
    attendance: "no",
    side: "bride",
    groupId: "g5",
    notes: "Ne može zbog službenog puta",
    companions: []
  },

  // Mladina strana - Fakultet (g7)
  {
    id: "8",
    firstName: "Ivana",
    lastName: "Marković",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g7",
    gift: {
      type: "money",
      amount: 15000
    },
    companions: [
      {
        id: "c6",
        firstName: "Miloš",
        lastName: "Marković",
        isAdult: true
      }
    ]
  },
  {
    id: "9",
    firstName: "Jovana",
    lastName: "Simić",
    phone: "0631234567",
    attendance: "pending",
    side: "bride",
    groupId: "g7",
    companions: []
  },

  // Mladoženjina strana - Uža porodica (g3)
  {
    id: "10",
    firstName: "Dragan",
    lastName: "Jovanović",
    phone: "0647894561",
    attendance: "yes",
    side: "groom",
    groupId: "g3",
    gift: {
      type: "money",
      amount: 100000
    },
    notes: "Otac mladoženje",
    companions: [
      {
        id: "c7",
        firstName: "Vesna",
        lastName: "Jovanović",
        isAdult: true
      }
    ]
  },
  {
    id: "11",
    firstName: "Milan",
    lastName: "Jovanović",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g3",
    gift: {
      type: "money",
      amount: 40000
    },
    notes: "Brat mladoženje",
    companions: [
      {
        id: "c8",
        firstName: "Ana",
        lastName: "Jovanović",
        isAdult: true
      },
      {
        id: "c9",
        firstName: "Nikola",
        lastName: "Jovanović",
        isAdult: false
      }
    ]
  },

  // Mladoženjina strana - Kolege (g4)
  {
    id: "12",
    firstName: "Nikola",
    lastName: "Stanković",
    phone: "0647894561",
    attendance: "pending",
    side: "groom",
    groupId: "g4",
    companions: []
  },
  {
    id: "13",
    firstName: "Marija",
    lastName: "Pavlović",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g4",
    gift: {
      type: "money",
      amount: 25000
    },
    companions: [
      {
        id: "c10",
        firstName: "Dejan",
        lastName: "Pavlović",
        isAdult: true
      }
    ]
  },

  // Mladoženjina strana - Rodbina (g6)
  {
    id: "14",
    firstName: "Miroslav",
    lastName: "Jovanović",
    phone: "0647894561",
    attendance: "yes",
    side: "groom",
    groupId: "g6",
    gift: {
      type: "other",
      description: "Set vina"
    },
    companions: [
      {
        id: "c11",
        firstName: "Jelena",
        lastName: "Jovanović",
        isAdult: true
      }
    ]
  },
  {
    id: "15",
    firstName: "Branko",
    lastName: "Jovanović",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g6",
    gift: {
      type: "money",
      amount: 35000
    },
    companions: [
      {
        id: "c12",
        firstName: "Milica",
        lastName: "Jovanović",
        isAdult: true
      },
      {
        id: "c13",
        firstName: "Sara",
        lastName: "Jovanović",
        isAdult: false
      }
    ]
  },

  // Mladoženjina strana - Komšije (g8)
  {
    id: "16",
    firstName: "Branko",
    lastName: "Đurić",
    phone: "0647894561",
    attendance: "yes",
    side: "groom",
    groupId: "g8",
    gift: {
      type: "money",
      amount: 20000
    },
    companions: [
      {
        id: "c14",
        firstName: "Milena",
        lastName: "Đurić",
        isAdult: true
      }
    ]
  },
  {
    id: "17",
    firstName: "Igor",
    lastName: "Kovačević",
    phone: "0631234567",
    attendance: "pending",
    side: "groom",
    groupId: "g8",
    companions: []
  },

  // Dodatni gosti - Mladina strana - Prijatelji (g2)
  {
    id: "18",
    firstName: "Nina",
    lastName: "Stojanović",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g2",
    gift: {
      type: "money",
      amount: 15000
    },
    companions: [
      {
        id: "c15",
        firstName: "Marko",
        lastName: "Stojanović",
        isAdult: true
      }
    ]
  },
  {
    id: "19",
    firstName: "Ana",
    lastName: "Popović",
    phone: "0631234567",
    attendance: "yes",
    side: "bride",
    groupId: "g2",
    companions: []
  },

  // Dodatni gosti - Mladina strana - Rodbina (g5)
  {
    id: "20",
    firstName: "Dušan",
    lastName: "Petrović",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g5",
    gift: {
      type: "money",
      amount: 25000
    },
    companions: [
      {
        id: "c16",
        firstName: "Teodora",
        lastName: "Petrović",
        isAdult: true
      }
    ]
  },

  // Dodatni gosti - Mladoženjina strana - Kolege (g4)
  {
    id: "21",
    firstName: "Stefan",
    lastName: "Ilić",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g4",
    gift: {
      type: "money",
      amount: 20000
    },
    companions: [
      {
        id: "c17",
        firstName: "Maja",
        lastName: "Ilić",
        isAdult: true
      }
    ]
  },
  {
    id: "22",
    firstName: "Aleksandar",
    lastName: "Todorović",
    phone: "0647894561",
    attendance: "pending",
    side: "groom",
    groupId: "g4",
    companions: []
  },

  // Dodatni gosti - Mladoženjina strana - Rodbina (g6)
  {
    id: "23",
    firstName: "Vladimir",
    lastName: "Jovanović",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g6",
    gift: {
      type: "other",
      description: "Set čaša"
    },
    companions: [
      {
        id: "c18",
        firstName: "Marina",
        lastName: "Jovanović",
        isAdult: true
      },
      {
        id: "c19",
        firstName: "Lena",
        lastName: "Jovanović",
        isAdult: false
      }
    ]
  },

  // Dodatni gosti - Mladina strana - Fakultet (g7)
  {
    id: "24",
    firstName: "Milica",
    lastName: "Đorđević",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g7",
    gift: {
      type: "money",
      amount: 15000
    },
    companions: [
      {
        id: "c20",
        firstName: "Luka",
        lastName: "Đorđević",
        isAdult: true
      }
    ]
  },

  // Negrupisani gosti - Mladina strana
  {
    id: "25",
    firstName: "Marina",
    lastName: "Kovačević",
    phone: "0631234567",
    attendance: "yes",
    side: "bride",
    groupId: null,
    gift: {
      type: "money",
      amount: 10000
    },
    companions: [
      {
        id: "c21",
        firstName: "Ana",
        lastName: "Kovačević",
        isAdult: false
      }
    ]
  },
  {
    id: "26",
    firstName: "Elena",
    lastName: "Radić",
    phone: "0647894561",
    attendance: "pending",
    side: "bride",
    groupId: null,
    companions: []
  },

  // Negrupisani gosti - Mladoženjina strana
  {
    id: "27",
    firstName: "Aleksandar",
    lastName: "Popović",
    phone: "0631234567",
    attendance: "no",
    side: "groom",
    groupId: null,
    notes: "Ne može zbog puta",
    companions: []
  },
  {
    id: "28",
    firstName: "Lazar",
    lastName: "Marković",
    phone: "0647894561",
    attendance: "yes",
    side: "groom",
    groupId: null,
    gift: {
      type: "money",
      amount: 15000
    },
    companions: [
      {
        id: "c22",
        firstName: "Sara",
        lastName: "Marković",
        isAdult: true
      }
    ]
  },

  // Dodatni gosti za postojeće grupe
  {
    id: "29",
    firstName: "Filip",
    lastName: "Janković",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g4",
    gift: {
      type: "money",
      amount: 20000
    },
    companions: [
      {
        id: "c23",
        firstName: "Mila",
        lastName: "Janković",
        isAdult: true
      }
    ]
  },
  {
    id: "30",
    firstName: "Teodora",
    lastName: "Lazić",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g2",
    companions: []
  },

  // Poslednji set gostiju
  {
    id: "31",
    firstName: "David",
    lastName: "Stanković",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g8",
    gift: {
      type: "money",
      amount: 25000
    },
    companions: [
      {
        id: "c24",
        firstName: "Ana",
        lastName: "Stanković",
        isAdult: true
      },
      {
        id: "c25",
        firstName: "Luka",
        lastName: "Stanković",
        isAdult: false
      }
    ]
  },
  {
    id: "32",
    firstName: "Sofija",
    lastName: "Nikolić",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g7",
    gift: {
      type: "money",
      amount: 20000
    },
    companions: [
      {
        id: "c26",
        firstName: "Marko",
        lastName: "Nikolić",
        isAdult: true
      }
    ]
  },
  {
    id: "33",
    firstName: "Vuk",
    lastName: "Đurić",
    phone: "0631234567",
    attendance: "yes",
    side: "groom",
    groupId: "g6",
    gift: {
      type: "other",
      description: "Set vina"
    },
    companions: []
  },
  {
    id: "34",
    firstName: "Mia",
    lastName: "Petrović",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g5",
    gift: {
      type: "money",
      amount: 30000
    },
    companions: [
      {
        id: "c27",
        firstName: "Luka",
        lastName: "Petrović",
        isAdult: true
      }
    ]
  },
  {
    id: "35",
    firstName: "Ognjen",
    lastName: "Jovanović",
    phone: "0631234567",
    attendance: "pending",
    side: "groom",
    groupId: "g4",
    companions: []
  },
  {
    id: "36",
    firstName: "Sara",
    lastName: "Ilić",
    phone: "0647894561",
    attendance: "yes",
    side: "bride",
    groupId: "g2",
    gift: {
      type: "money",
      amount: 15000
    },
    companions: [
      {
        id: "c28",
        firstName: "Nikola",
        lastName: "Ilić",
        isAdult: true
      }
    ]
  },
  {
    id: "37",
    firstName: "Lena",
    lastName: "Marković",
    phone: "0631234567",
    attendance: "yes",
    side: "bride",
    groupId: "g7",
    companions: []
  },
  {
    id: "38",
    firstName: "Mateja",
    lastName: "Kovač",
    phone: "0647894561",
    attendance: "yes",
    side: "groom",
    groupId: "g8",
    gift: {
      type: "money",
      amount: 20000
    },
    companions: [
      {
        id: "c29",
        firstName: "Nina",
        lastName: "Kovač",
        isAdult: true
      }
    ]
  },
  {
    id: "39",
    firstName: "Katarina",
    lastName: "Petrović",
    phone: "0631234567",
    attendance: "yes",
    side: "bride",
    groupId: "g5",
    gift: {
      type: "other",
      description: "Set peškira"
    },
    companions: [
      {
        id: "c30",
        firstName: "Stefan",
        lastName: "Petrović",
        isAdult: true
      }
    ]
  },
  {
    id: "40",
    firstName: "Nemanja",
    lastName: "Jovanović",
    phone: "0647894561",
    attendance: "yes",
    side: "groom",
    groupId: "g6",
    gift: {
      type: "money",
      amount: 25000
    },
    companions: [
      {
        id: "c31",
        firstName: "Jelena",
        lastName: "Jovanović",
        isAdult: true
      },
      {
        id: "c32",
        firstName: "Mila",
        lastName: "Jovanović",
        isAdult: false
      }
    ]
  }
];

================================================
File: features/wedding/lib/utils.ts
================================================
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================================================
File: features/wedding/stores/filter-store.ts
================================================
import { create } from 'zustand';
import type { Side, AttendanceStatus } from '../types';

interface FilterState {
  viewMode: 'all' | 'groups' | 'ungrouped';
  selectedSide: Side | 'all';
  selectedStatus: AttendanceStatus | 'all';
  searchQuery: string;
  setViewMode: (mode: 'all' | 'groups' | 'ungrouped') => void;
  setSelectedSide: (side: Side | 'all') => void;
  setSelectedStatus: (status: AttendanceStatus | 'all') => void;
  setSearchQuery: (query: string) => void;
}

export const useFilterStore = create<FilterState>((set) => ({
  viewMode: 'all',
  selectedSide: 'all',
  selectedStatus: 'all',
  searchQuery: '',
  
  setViewMode: (mode) => set({ viewMode: mode }),
  setSelectedSide: (side) => set({ selectedSide: side }),
  setSelectedStatus: (status) => set({ selectedStatus: status }),
  setSearchQuery: (query) => set({ searchQuery: query }),
}));

================================================
File: hooks/use-toast.ts
================================================
'use client';

// Inspired by react-hot-toast library
import * as React from 'react';

import type { ToastActionElement, ToastProps } from '@/components/ui/toast';

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  };
}

export { useToast, toast };


================================================
File: lib/utils.ts
================================================
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================================================
File: supabase/migrations/20250202215057_frosty_sunset.sql
================================================
/*
  # Initial schema setup for wedding guest management

  1. New Tables
    - `profiles`
      - `id` (uuid, primary key)
      - `email` (text, unique)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `weddings`
      - `id` (uuid, primary key)
      - `bride_name` (text)
      - `groom_name` (text)
      - `date` (date)
      - `venue_name` (text)
      - `venue_address` (text)
      - `venue_hall` (text)
      - `price_per_person` (integer)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
      - `user_id` (uuid, foreign key)

    - `groups`
      - `id` (uuid, primary key)
      - `name` (text)
      - `side` (text)
      - `wedding_id` (uuid, foreign key)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

    - `guests`
      - `id` (uuid, primary key)
      - `first_name` (text)
      - `last_name` (text)
      - `phone` (text)
      - `attendance` (text)
      - `side` (text)
      - `group_id` (uuid, foreign key)
      - `notes` (text)
      - `wedding_id` (uuid, foreign key)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

    - `companions`
      - `id` (uuid, primary key)
      - `first_name` (text)
      - `last_name` (text)
      - `is_adult` (boolean)
      - `guest_id` (uuid, foreign key)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

    - `gifts`
      - `id` (uuid, primary key)
      - `type` (text)
      - `description` (text)
      - `amount` (integer)
      - `guest_id` (uuid, foreign key)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users to manage their own data
    - Restrict access to profiles and weddings to their owners
    - Allow read/write access to related tables based on wedding ownership
*/

-- Create custom types
CREATE TYPE attendance_status AS ENUM ('yes', 'no', 'pending');
CREATE TYPE side_type AS ENUM ('bride', 'groom');
CREATE TYPE gift_type AS ENUM ('money', 'other');

-- Create profiles table
CREATE TABLE profiles (
  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  email text UNIQUE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create weddings table
CREATE TABLE weddings (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  bride_name text NOT NULL,
  groom_name text NOT NULL,
  date date NOT NULL,
  venue_name text NOT NULL,
  venue_address text NOT NULL,
  venue_hall text NOT NULL,
  price_per_person integer NOT NULL,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create groups table
CREATE TABLE groups (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  side side_type NOT NULL,
  wedding_id uuid REFERENCES weddings(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create guests table
CREATE TABLE guests (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  first_name text NOT NULL,
  last_name text NOT NULL,
  phone text,
  attendance attendance_status DEFAULT 'pending',
  side side_type NOT NULL,
  group_id uuid REFERENCES groups(id) ON DELETE SET NULL,
  notes text,
  wedding_id uuid REFERENCES weddings(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create companions table
CREATE TABLE companions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  first_name text NOT NULL,
  last_name text,
  is_adult boolean NOT NULL DEFAULT true,
  guest_id uuid REFERENCES guests(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create gifts table
CREATE TABLE gifts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  type gift_type NOT NULL,
  description text,
  amount integer CHECK (amount > 0),
  guest_id uuid REFERENCES guests(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT valid_gift_data CHECK (
    (type = 'money' AND amount IS NOT NULL AND description IS NULL) OR
    (type = 'other' AND description IS NOT NULL AND amount IS NULL)
  )
);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE weddings ENABLE ROW LEVEL SECURITY;
ALTER TABLE groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE guests ENABLE ROW LEVEL SECURITY;
ALTER TABLE companions ENABLE ROW LEVEL SECURITY;
ALTER TABLE gifts ENABLE ROW LEVEL SECURITY;

-- Create policies

-- Profiles policies
CREATE POLICY "Users can view own profile"
  ON profiles FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id);

-- Weddings policies
CREATE POLICY "Users can view own weddings"
  ON weddings FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can create weddings"
  ON weddings FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own weddings"
  ON weddings FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can delete own weddings"
  ON weddings FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Groups policies
CREATE POLICY "Users can view groups of their weddings"
  ON groups FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = groups.wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can create groups for their weddings"
  ON groups FOR INSERT
  TO authenticated
  WITH CHECK (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can update groups of their weddings"
  ON groups FOR UPDATE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = groups.wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can delete groups of their weddings"
  ON groups FOR DELETE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = groups.wedding_id
    AND weddings.user_id = auth.uid()
  ));

-- Guests policies
CREATE POLICY "Users can view guests of their weddings"
  ON guests FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = guests.wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can create guests for their weddings"
  ON guests FOR INSERT
  TO authenticated
  WITH CHECK (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can update guests of their weddings"
  ON guests FOR UPDATE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = guests.wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can delete guests of their weddings"
  ON guests FOR DELETE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = guests.wedding_id
    AND weddings.user_id = auth.uid()
  ));

-- Companions policies
CREATE POLICY "Users can view companions of their wedding guests"
  ON companions FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = companions.guest_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can create companions for their wedding guests"
  ON companions FOR INSERT
  TO authenticated
  WITH CHECK (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = guest_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can update companions of their wedding guests"
  ON companions FOR UPDATE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = companions.guest_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can delete companions of their wedding guests"
  ON companions FOR DELETE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = companions.guest_id
    AND weddings.user_id = auth.uid()
  ));

-- Gifts policies
CREATE POLICY "Users can view gifts of their wedding guests"
  ON gifts FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = gifts.guest_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can create gifts for their wedding guests"
  ON gifts FOR INSERT
  TO authenticated
  WITH CHECK (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = guest_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can update gifts of their wedding guests"
  ON gifts FOR UPDATE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = gifts.guest_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can delete gifts of their wedding guests"
  ON gifts FOR DELETE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM guests
    JOIN weddings ON weddings.id = guests.wedding_id
    WHERE guests.id = gifts.guest_id
    AND weddings.user_id = auth.uid()
  ));

-- Create triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_weddings_updated_at
  BEFORE UPDATE ON weddings
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_groups_updated_at
  BEFORE UPDATE ON groups
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_guests_updated_at
  BEFORE UPDATE ON guests
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_companions_updated_at
  BEFORE UPDATE ON companions
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_gifts_updated_at
  BEFORE UPDATE ON gifts
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

================================================
File: supabase/migrations/20250202221226_late_harbor.sql
================================================
/*
  # Fix enum types

  1. Changes
    - Adds safe creation of enum types with existence checks
    - Ensures types are only created if they don't already exist
  
  2. Technical Details
    - Uses DO blocks to check type existence
    - Creates attendance_status, side_type, and gift_type enums if missing
*/

DO $$ 
BEGIN
    -- Create attendance_status enum if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'attendance_status') THEN
        CREATE TYPE attendance_status AS ENUM ('yes', 'no', 'pending');
    END IF;

    -- Create side_type enum if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'side_type') THEN
        CREATE TYPE side_type AS ENUM ('bride', 'groom');
    END IF;

    -- Create gift_type enum if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gift_type') THEN
        CREATE TYPE gift_type AS ENUM ('money', 'other');
    END IF;
END $$;

================================================
File: supabase/migrations/20250202222538_rough_canyon.sql
================================================
/*
  # Fix profiles RLS policies

  1. Changes
    - Add policy for inserting own profile
    - Add policy for updating own profile
    - Add policy for viewing own profile

  2. Security
    - Users can only manage their own profiles
    - Authenticated users can create their own profile
*/

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;

-- Create new policies
CREATE POLICY "Users can manage own profile"
  ON profiles
  USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile"
  ON profiles
  FOR INSERT
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update own profile"
  ON profiles
  FOR UPDATE
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

================================================
File: supabase/migrations/20250202222659_gentle_pond.sql
================================================
/*
  # Fix profiles RLS policies again

  1. Changes
    - Drop all existing policies for profiles table
    - Add new policy for authenticated users to create their own profile
    - Add policy for authenticated users to view their own profile
    - Add policy for authenticated users to update their own profile

  2. Security
    - Users can only manage their own profiles
    - Authenticated users can create their own profile
    - No user can delete profiles
*/

-- Drop all existing policies
DROP POLICY IF EXISTS "Users can manage own profile" ON profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;

-- Create new policies with proper security
CREATE POLICY "Enable read access for authenticated users"
  ON profiles FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Enable insert for authenticated users"
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Enable update for users based on id"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Ensure RLS is enabled
ALTER TABLE profiles FORCE ROW LEVEL SECURITY;

================================================
File: supabase/migrations/20250202222829_purple_canyon.sql
================================================
/*
  # Fix profiles policies

  1. Changes
    - Drop all existing policies for profiles table
    - Add new policies with proper security
    - Ensure RLS is enabled

  2. Security
    - Users can view all profiles (needed for collaboration)
    - Users can only create their own profile
    - Users can only update their own profile
*/

-- Drop all existing policies
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON profiles;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON profiles;
DROP POLICY IF EXISTS "Enable update for users based on id" ON profiles;
DROP POLICY IF EXISTS "Users can manage own profile" ON profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;

-- Create new policies with proper security
CREATE POLICY "profiles_read_policy"
  ON profiles FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "profiles_insert_policy"
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

CREATE POLICY "profiles_update_policy"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Ensure RLS is enabled
ALTER TABLE profiles FORCE ROW LEVEL SECURITY;

================================================
File: supabase/migrations/20250202222930_mute_mud.sql
================================================
/*
  # Final fix for profiles and RLS

  1. Changes
    - Drop all existing policies for profiles table
    - Add new simplified policies with proper security
    - Add trigger for automatic profile creation on auth.users insert
    - Ensure RLS is enabled but allows profile creation

  2. Security
    - Users can read all profiles (needed for collaboration)
    - Users can create their own profile
    - Users can only update their own profile
    - Automatic profile creation on signup
*/

-- Drop all existing policies
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON profiles;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON profiles;
DROP POLICY IF EXISTS "Enable update for users based on id" ON profiles;
DROP POLICY IF EXISTS "Users can manage own profile" ON profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "profiles_read_policy" ON profiles;
DROP POLICY IF EXISTS "profiles_insert_policy" ON profiles;
DROP POLICY IF EXISTS "profiles_update_policy" ON profiles;

-- Create new simplified policies
CREATE POLICY "allow_read"
  ON profiles FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "allow_insert"
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (true);

CREATE POLICY "allow_update"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id);

-- Create function to handle profile creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, email, updated_at)
  VALUES (new.id, new.email, now())
  ON CONFLICT (id) DO NOTHING;
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for automatic profile creation
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

================================================
File: supabase/migrations/20250202223021_odd_rice.sql
================================================
/*
  # Fix profiles policy conflict

  1. Changes
    - Drop conflicting policy
    - Ensure no duplicate policies exist

  2. Security
    - Maintains existing security model
    - No changes to functionality
*/

-- Drop potentially conflicting policies
DROP POLICY IF EXISTS "profiles_read_policy" ON profiles;
DROP POLICY IF EXISTS "profiles_insert_policy" ON profiles;
DROP POLICY IF EXISTS "profiles_update_policy" ON profiles;

-- No need to recreate policies as they are already handled by previous migrations

================================================
File: supabase/migrations/20250202223128_plain_haze.sql
================================================
/*
  # Fix profiles policies and creation

  1. Changes
    - Drop all existing policies to start fresh
    - Create simplified policies that allow proper profile creation and management
    - Update trigger function to handle profile creation properly

  2. Security
    - Maintains RLS security
    - Ensures authenticated users can manage their own profiles
    - Allows proper profile creation during signup
*/

-- Drop all existing policies
DROP POLICY IF EXISTS "allow_read" ON profiles;
DROP POLICY IF EXISTS "allow_insert" ON profiles;
DROP POLICY IF EXISTS "allow_update" ON profiles;

-- Create new simplified policies
CREATE POLICY "profiles_select"
  ON profiles FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "profiles_insert"
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

CREATE POLICY "profiles_update"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id);

-- Update the handle_new_user function to be more robust
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, email, updated_at)
  VALUES (new.id, new.email, CURRENT_TIMESTAMP)
  ON CONFLICT (id) DO UPDATE
  SET email = EXCLUDED.email,
      updated_at = CURRENT_TIMESTAMP;
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Ensure the trigger exists
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

================================================
File: supabase/migrations/20250202223242_spring_shape.sql
================================================
/*
  # Final fix for profiles table

  1. Changes
    - Drop all existing policies
    - Create single set of working policies
    - Update trigger function for robust profile creation
    - Ensure proper security while allowing profile creation

  2. Security
    - Maintains RLS security
    - Allows proper profile creation during signup
    - Prevents unauthorized access
*/

-- Drop all existing policies
DO $$ 
BEGIN
  -- Drop all policies from profiles table
  FOR pol IN (
    SELECT policyname 
    FROM pg_policies 
    WHERE tablename = 'profiles'
  ) LOOP
    EXECUTE format('DROP POLICY IF EXISTS %I ON profiles', pol.policyname);
  END LOOP;
END $$;

-- Create final set of policies
CREATE POLICY "Enable profile management"
  ON profiles
  TO authenticated
  USING (true)
  WITH CHECK (auth.uid() = id);

-- Update the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
SECURITY DEFINER SET search_path = public
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO public.profiles (id, email, updated_at)
  VALUES (new.id, new.email, CURRENT_TIMESTAMP)
  ON CONFLICT (id) DO UPDATE
  SET email = EXCLUDED.email,
      updated_at = CURRENT_TIMESTAMP;
  RETURN new;
END;
$$;

-- Recreate trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO authenticated, anon, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA public TO authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO authenticated, service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO authenticated, service_role;

================================================
File: supabase/migrations/20250203000000_add_wedding_collaborators.sql
================================================
/*
  # Dodavanje tabele za saradnike na venčanju

  1. Nova tabela
    - `wedding_collaborators`
      - `id` (uuid, primary key)
      - `wedding_id` (uuid, foreign key)
      - `email` (text)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS
    - Dodavanje policy-ja za pristup
*/

-- Create wedding collaborators table
CREATE TABLE wedding_collaborators (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  wedding_id uuid REFERENCES weddings(id) ON DELETE CASCADE,
  email text NOT NULL,
  created_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE wedding_collaborators ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view collaborators of their weddings"
  ON wedding_collaborators FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = wedding_collaborators.wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can add collaborators to their weddings"
  ON wedding_collaborators FOR INSERT
  TO authenticated
  WITH CHECK (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = wedding_id
    AND weddings.user_id = auth.uid()
  ));

CREATE POLICY "Users can remove collaborators from their weddings"
  ON wedding_collaborators FOR DELETE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = wedding_collaborators.wedding_id
    AND weddings.user_id = auth.uid()
  ));

-- Add policy to weddings table to allow collaborators to view
CREATE POLICY "Collaborators can view weddings"
  ON weddings FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM wedding_collaborators
    WHERE wedding_collaborators.wedding_id = id
    AND wedding_collaborators.email = auth.email()
  ));


================================================
File: .bolt/config.json
================================================
{
  "template": "nextjs-shadcn"
}


================================================
File: .bolt/ignore
================================================
components/ui/*
hooks/use-toast.ts


================================================
File: .bolt/prompt
================================================
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

When using client-side hooks (useState and useEffect) in a component that's being treated as a Server Component by Next.js, always add the "use client" directive at the top of the file.

Do not write code that will trigger this error: "Warning: Extra attributes from the server: %s%s""class,style"

By default, this template supports JSX syntax with Tailwind CSS classes, the shadcn/ui library, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist.


